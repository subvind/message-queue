# NESTCODER

You are NestCoder, a HTMX, EJS and TypeScript/NestJS language coding assistant.

## INPUT: 

You will receive a TARGET <FILE/> in the EJS or TypeScript/NestJS language, some additional <FILE/>'s for context, and a change or refactor <REQUEST/>, from the user.

## OUTPUT:

You must answer with one or more <FILE/> tags, including files to be overwritten, in order to fulfill the user's request.

---

# EXAMPLE NESTCODER USAGE

## Suppose you're given the following INPUT:

<FILE path="/Users/v/vic/dev/tsbook/List/_.ts">
// A polymorphic List with two constructors:
// - Cons: appends an element to a list
// - Nil: the empty list
export type List<A>
  = { "$": "Cons", head: A, tail: List<A> }
  | { "$": "Nil" };
</FILE>

<FILE path="/Users/v/vic/dev/tsbook/List/map.ts" TARGET>
// The map function for List, to be implemented
import { List } from "./_";

export function map<A, B>(fn: (a: A) => B, list: List<A>): List<B> {
  ?
}
</FILE>

<REQUEST>
complete the map function
</REQUEST>

## Then, you must answer with the following OUTPUT:

<FILE path="/Users/v/vic/dev/tsbook/List/map.ts">
import { List } from "./_";

// Applies a function to each element of a list.
// - fn: the function to be applied
// - xs: the elements to apply fn to
// = a new list with fn applied to all elements
export function map<A, B>(xs: List<A>, fn: (a: A) => B): List<B> {
  switch (xs.$) {
    case "Cons": {
      var head = fn(xs.head);
      var tail = map(xs.tail, fn);
      return { $: "Cons", head, tail };
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
</FILE>

(Because it fulfills the user's request perfectly.)

---

# GUIDE FOR THE TYPESCRIPT LANGUAGE

- Your code must be inspired by pure functional programming languages like Haskell.

- Every file must declare only, and only one, top-level function or datatype.

- Functions must be pure, using switch instead of 'if-else' or 'case-of'.

- When defining local variables, align equal signs whenever possible.

- Use CamelCase for everything. (IMPORTANT)

- A 'Foo/Bar' top-level definition must be either on './Foo/Bar.ts' or './Foo/Bar/_.ts'. 

# GUIDE FOR THE EJS LANGUAGE

- Use HTMX for frontend.

## Top-Level Function

Every .ts file must define ONE top-level function. Example:

```typescript
// Calculates the size of an HTerm
// - term: the HTerm to measure
// = the number of nodes in the term
export function size(term: HTerm): number {
  switch (term.$) {
    case "Lam": {
      var bod_size = size(term.bod({$: "Var", nam: term.nam}));
      return 1 + bod_size;
    }
    case "App": {
      var fun_size = size(term.fun);
      var arg_size = size(term.arg);
      return 1 + fun_size + arg_size;
    }
    case "Var": {
      return 1;
    }
  }
}
```

Where:
- The function name is defined (e.g., 'size')
- Parameters are specified with their types (e.g., 'term: HTerm')
- The return type is specified (e.g., ': number')
- The function body uses a switch statement for pattern matching
- Local variables are used to make the code less horizontal

## Top-Level Datatype

Alternatively, a .ts file can also define a datatype (ADT). Example:

```typescript
// Represents a Higher-Order Abstract Syntax Term
// - Lam: lambda abstraction
// - App: function application
// - Var: variable
export type HTerm
  = { $: "Lam", bod: (x: HTerm) => HTerm }
  | { $: "App", fun: HTerm, arg: HTerm }
  | { $: "Var", nam: string }
```

ADTs must follow this convention:
- Constructors represented as objects
- The dollar-sign is used for the constructor name
- Other object fields are the constructor fields

## Idiomatic TypeScript Examples

Below are some additional idiomatic TypeScript in the purely functional style: 

### List/zip.ts

```typescript
import { List } from "./_";

// Combines two lists into a list of pairs
// - xs: the first input list
// - ys: the second input list
// = a new list of pairs, with length equal to the shorter input list
export function zip<A, B>(xs: List<A>, ys: List<B>): List<[A, B]> {
  switch (xs.$) {
    case "Cons": {
      switch (ys.$) {
        case "Cons": {
          var head = [xs.head, ys.head] as [A,B];
          var tail = zip(xs.tail, ys.tail);
          return { $: "Cons", head, tail };
        }
        case "Nil": {
          return { $: "Nil" };
        }
      }
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
```

### List/filter.ts

```typescript
import { List } from "./_";

// Filters a list based on a predicate function
// - xs: the input list
// - pred: the predicate function to test each element
// = a new list containing only elements that satisfy the predicate
export function filter<A>(xs: List<A>, pred: (a: A) => boolean): List<A> {
  switch (xs.$) {
    case "Cons": {
      var head = xs.head;
      var tail = filter(xs.tail, pred);
      return pred(xs.head) ? { $: "Cons", head, tail } : tail;
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
```

### Tree/_.ts

```typescript
// Represents a binary tree
// - Node: an internal node with a value and two subtrees
// - Leaf: a leaf node (empty)
export type Tree<A>
  = { $: "Node", val: A, left: Tree<A>, right: Tree<A> }
  | { $: "Leaf" };
```

### Tree/sum.ts

```typescript
import { Tree } from "./_";

// Sums all values in a numeric tree
// - tree: the tree to sum
// = the sum of all values in the tree
export function sum(tree: Tree<number>): number {
  switch (tree.$) {
    case "Node": {
      var left  = sum(tree.left);
      var right = sum(tree.right);
      return tree.val + left + right;
    }
    case "Leaf": {
      return 0;
    }
  }
}
```

### V3/_.ts

```typescript
// Represents a 3D vector
export type V3
  = { $: "V3", x: number, y: number, z: number };
```

### V3/dot.ts

```typescript
import { V3 } from "./_";

// Calculates the dot product of two 3D vectors
// - a: the first vector
// - b: the second vector
// = the dot product of a and b
export function dot(a: V3, b: V3): number {
  return a.x * b.x + a.y * b.y + a.z * b.z;
}
```

---

# NOTES

- Make ONLY the changes necessary to correctly fulfill the user's REQUEST.

- Do NOT fix, remove, complete or alter any parts unrelated to the REQUEST.

- Pay attention to the user's style, and mimic it as close as possible.

- Pay attention to the TypeScript examples and mimic their style as a default.

- Consult TypeScript guide to emit idiomatic correct code.

- Do NOT use or assume the existence of files that weren't shown to you.

- Be precise and careful in your modifications.

---

# TASK

You will now be given the actual INPUT you must work with.

<FILE path="/home/travis/Projects/message-queue/src/message-storage/storage-adapter.interface.ts">
export interface StorageAdapter {
  connect(): Promise<void>;
  disconnect(): Promise<void>;
  isConnected(): boolean;
  rpush(key: string, value: string): Promise<void>;
  lrange(key: string, start: number, stop: number): Promise<string[]>;
  lpop(key: string): Promise<string | null>;
  llen(key: string): Promise<number>;
  maxRetries: number;
  initialRetryDelay: number;
}
</FILE>
<FILE path="/home/travis/Projects/message-queue/src/message-storage/message-storage.service.ts">
import { Injectable, OnModuleInit, OnModuleDestroy, Logger } from '@nestjs/common';
import { StorageAdapter } from './storage-adapter.interface';
import { IsdbAdapter } from './isdb-adapter';
import { RedisAdapter } from './redis-adapter';

type StorageType = 'isdb' | 'redis';

@Injectable()
export class MessageStorageService implements OnModuleInit, OnModuleDestroy {
  private storageAdapter: StorageAdapter;
  private logger = new Logger(MessageStorageService.name);
  private reconnectionInterval: NodeJS.Timeout;

  constructor() {
    const storageType = (process.env.STORAGE_TYPE as StorageType) || 'isdb';
    this.storageAdapter = this.createStorageAdapter(storageType);
  }

  private createStorageAdapter(storageType: StorageType): StorageAdapter {
    switch (storageType) {
      case 'isdb':
        return new IsdbAdapter({
          database: Number(process.env.ISDB_DATABASE || '1'),
          username: process.env.ISDB_USERNAME || 'root',
          password: process.env.ISDB_PASSWORD || 'root',
        });
      case 'redis':
        return new RedisAdapter({
          host: process.env.REDIS_HOST || 'localhost',
          port: parseInt(process.env.REDIS_PORT || '6379'),
        });
      default:
        throw new Error(`Unsupported storage type: ${storageType}`);
    }
  }

  async onModuleInit() {
    await this.connectWithRetry();
    this.startReconnectionInterval();
  }

  private startReconnectionInterval() {
    this.reconnectionInterval = setInterval(async () => {
      if (!this.storageAdapter.isConnected()) {
        this.logger.warn('Connection lost. Attempting to reconnect...');
        await this.connectWithRetry();
      }
    }, 5000);
  }

  private async connectWithRetry(retryCount = 0): Promise<void> {
    try {
      await this.storageAdapter.connect();
      this.logger.log('Successfully connected to the database');
    } catch (error) {
      if (retryCount < this.storageAdapter.maxRetries) {
        const delay = this.storageAdapter.initialRetryDelay * Math.pow(2, retryCount);
        this.logger.warn(`Failed to connect. Retrying in ${delay}ms...`);
        await new Promise(resolve => setTimeout(resolve, delay));
        await this.connectWithRetry(retryCount + 1);
      } else {
        this.logger.error('Max retries reached. Unable to connect to the database.');
        this.logger.error(error);
      }
    }
  }

  async onModuleDestroy() {
    clearInterval(this.reconnectionInterval);
    await this.storageAdapter.disconnect();
  }

  private getQueueKey(exchangeName: string, queueName: string): string {
    return `${exchangeName}:${queueName}`;
  }

  async saveMessage(exchangeName: string, queueName: string, message: any): Promise<void> {
    const queueKey = this.getQueueKey(exchangeName, queueName);
    const messageData = JSON.stringify({
      timestamp: Date.now(),
      content: message
    });

    try {
      await this.storageAdapter.rpush(queueKey, messageData);
    } catch (error) {
      this.logger.error(`Failed to save message: ${error.message}`);
    }
  }

  async getMessages(exchangeName: string, queueName: string, count: number = 1): Promise<any[]> {
    const queueKey = this.getQueueKey(exchangeName, queueName);
    try {
      const messages = await this.storageAdapter.lrange(queueKey, 0, count - 1);
      return messages.map(msg => JSON.parse(msg));
    } catch (error) {
      this.logger.error(`Failed to get messages: ${error.message}`);
      return [];
    }
  }

  async removeMessage(exchangeName: string, queueName: string): Promise<any> {
    const queueKey = this.getQueueKey(exchangeName, queueName);
    try {
      const message = await this.storageAdapter.lpop(queueKey);
      return message ? JSON.parse(message) : null;
    } catch (error) {
      this.logger.error(`Failed to remove message: ${error.message}`);
      return null;
    }
  }

  async getQueueLength(exchangeName: string, queueName: string): Promise<number> {
    const queueKey = this.getQueueKey(exchangeName, queueName);
    try {
      return await this.storageAdapter.llen(queueKey);
    } catch (error) {
      this.logger.error(`Failed to get queue length: ${error.message}`);
      return 0;
    }
  }
}
</FILE>
<FILE path="/home/travis/Projects/message-queue/src/message-storage/redis-adapter.ts">
import { StorageAdapter } from './storage-adapter.interface';
import Redis from 'ioredis';

export class RedisAdapter implements StorageAdapter {
  private client: Redis;

  maxRetries = 5;
  initialRetryDelay = 1000;

  constructor(config: { host: string; port: number }) {
    this.client = new Redis(config);
  }

  async connect(): Promise<void> {
    // Redis client automatically connects when created
  }

  async disconnect(): Promise<void> {
    await this.client.quit();
  }

  isConnected(): boolean {
    return this.client.status === 'ready';
  }

  async rpush(key: string, value: string): Promise<void> {
    await this.client.rpush(key, value);
  }

  async lrange(key: string, start: number, stop: number): Promise<string[]> {
    return await this.client.lrange(key, start, stop);
  }

  async lpop(key: string): Promise<string | null> {
    return await this.client.lpop(key);
  }

  async llen(key: string): Promise<number> {
    return await this.client.llen(key);
  }
}
</FILE>
<FILE path="/home/travis/Projects/message-queue/src/message-storage/isdb-adapter.ts">
import { StorageAdapter } from './storage-adapter.interface';
import { DatabaseClient } from 'database-client';

export class IsdbAdapter implements StorageAdapter {
  private client: DatabaseClient;
  private database: number;
  private username: string;
  private password: string;

  maxRetries = 5;
  initialRetryDelay = 1000;

  constructor(config: { database: number; username: string; password: string }) {
    this.database = config.database;
    this.username = config.username;
    this.password = config.password;
  }

  async connect(): Promise<void> {
    this.client = new DatabaseClient('http://localhost:6969');
    await this.client.createUser(this.username, this.password);
    await this.client.login(this.username, this.password);
    await this.client.assignUserToDatabase(this.database);
  }

  async disconnect(): Promise<void> {
    // Implement disconnect if needed
  }

  isConnected(): boolean {
    return this.client ? true : false;
  }

  async rpush(key: string, value: string): Promise<void> {
    await this.client.rpush(this.database, key, [value]);
  }

  async lrange(key: string, start: number, stop: number): Promise<string[]> {
    const result = await this.client.lrange(this.database, key, start, stop);
    return result.map(item => JSON.stringify(item));
  }

  async lpop(key: string): Promise<string | null> {
    const result = await this.client.lpop(this.database, key);
    return result ? JSON.stringify(result) : null;
  }

  async llen(key: string): Promise<number> {
    return await this.client.llen(this.database, key);
  }
}
</FILE>
<FILE path="/home/travis/Projects/message-queue/src/message-broker/message-broker.service.ts">
import { Injectable } from '@nestjs/common';
import { MessageStorageService } from '../message-storage/message-storage.service';
import { Exchange } from '../exchange/exchange';
import { EventEmitter } from 'events';

@Injectable()
export class MessageBrokerService {
  private exchanges: Map<string, Exchange> = new Map();
  private eventEmitter: EventEmitter = new EventEmitter();

  constructor(private messageStorage: MessageStorageService) {}

  createExchange(name: string): Exchange {
    if (!this.exchanges.has(name)) {
      const exchange = new Exchange(name, this.messageStorage);
      this.exchanges.set(name, exchange);
      return exchange;
    }
    return this.exchanges.get(name);
  }

  getExchange(name: string): Exchange | undefined {
    return this.exchanges.get(name);
  }

  async publish(exchangeName: string, routingKey: string, message: any): Promise<boolean> {
    const exchange = this.getExchange(exchangeName);
    if (exchange) {
      await exchange.publish(routingKey, message);
      // Emit the message to all bound queues
      const boundQueues = exchange.getBoundQueues(routingKey);
      for (const queue of boundQueues) {
        this.eventEmitter.emit('message', exchangeName, queue, message);
      }
      // console.log(`Published message to ${exchangeName}/${routingKey}:`, message);
      return true;
    }
    return false;
  }

  async consume(exchangeName: string, queueName: string): Promise<any> {
    const exchange = this.getExchange(exchangeName);
    if (exchange) {
      return await exchange.consume(queueName);
    }
    return null;
  }

  bind(exchangeName: string, queueName: string, routingKey: string): boolean {
    const exchange = this.getExchange(exchangeName);
    if (exchange) {
      exchange.bind(queueName, routingKey);
      return true;
    }
    return false;
  }

  subscribe(exchangeName: string, queueName: string, callback: (message: any) => void): boolean {
    // console.log(`Subscribing to ${exchangeName}/${queueName}`);
    this.eventEmitter.on('message', (exchange, queue, message) => {
      if (exchange === exchangeName && queue === queueName) {
        callback(message);
      }
    });
    return true;
  }

  unsubscribe(exchangeName: string, queueName: string, callback: (message: any) => void): boolean {
    this.eventEmitter.removeListener('message', callback);
    return true;
  }

  async getQueueLength(exchangeName: string, queueName: string): Promise<number> {
    const exchange = this.getExchange(exchangeName);
    if (exchange) {
      return await exchange.getQueueLength(queueName);
    }
    return 0;
  }

  onMessage(callback: (exchange: string, queue: string, message: any) => void) {
    this.eventEmitter.on('message', callback);
  }
}
</FILE>
<FILE path="/home/travis/Projects/message-queue/src/message-broker/message-broker.controller.ts">

import { Controller, Post, Body, Get, Param } from '@nestjs/common';
import { MessageBrokerService } from './message-broker.service';

@Controller('message-broker')
export class MessageBrokerController {
  constructor(private readonly messageBrokerService: MessageBrokerService) {}

  @Post('exchange')
  createExchange(@Body('name') name: string) {
    this.messageBrokerService.createExchange(name);
    return { status: 'ok', message: `Exchange ${name} created` };
  }

  @Post('bind')
  bind(
    @Body('exchange') exchange: string,
    @Body('queue') queue: string,
    @Body('routingKey') routingKey: string,
  ) {
    const result = this.messageBrokerService.bind(exchange, queue, routingKey);
    return result
      ? { status: 'ok', message: 'Binding created' }
      : { status: 'error', message: 'Exchange not found' };
  }

  @Post('publish')
  publish(
    @Body('exchange') exchange: string,
    @Body('routingKey') routingKey: string,
    @Body('message') message: any,
  ) {
    const result = this.messageBrokerService.publish(exchange, routingKey, message);
    return result
      ? { status: 'ok', message: 'Message published' }
      : { status: 'error', message: 'Exchange not found' };
  }

  @Get('consume/:exchange/:queue')
  async consume(
    @Param('exchange') exchange: string,
    @Param('queue') queue: string,
  ) {
    const message = await this.messageBrokerService.consume(exchange, queue);
    return message
      ? { status: 'ok', message }
      : { status: 'error', message: 'No message available or exchange/queue not found' };
  }

  @Get('queue-length/:exchange/:queue')
  async getQueueLength(
    @Param('exchange') exchange: string,
    @Param('queue') queue: string,
  ) {
    const length = await this.messageBrokerService.getQueueLength(exchange, queue);
    return { status: 'ok', length };
  }
}
</FILE>
<FILE path="/home/travis/Projects/message-queue/src/message-broker/message-broker.gateway.ts">
import {
  WebSocketGateway,
  SubscribeMessage,
  MessageBody,
  ConnectedSocket,
  WebSocketServer,
} from '@nestjs/websockets';
import { Server, Socket } from 'socket.io';
import { MessageBrokerService } from './message-broker.service';

@WebSocketGateway()
export class MessageBrokerGateway {
  @WebSocketServer()
  server: Server;

  private subscriptions: Map<string, Set<Socket>> = new Map();

  constructor(private readonly messageBrokerService: MessageBrokerService) {
    this.subscribeToAllExchanges();
  }

  private subscribeToAllExchanges() {
    this.messageBrokerService.onMessage(async (exchange, queue, message) => {
      const subscriptionKey = `${exchange}:${queue}`;
      const subscribers = this.subscriptions.get(subscriptionKey);
      if (subscribers) {
        // Consume the message from the queue
        await this.messageBrokerService.consume(exchange, queue);
        subscribers.forEach(subscriber => {
          subscriber.emit('message', { exchange, queue, message });
        });
      }
    });
  }

  @SubscribeMessage('subscribe')
  handleSubscribe(
    @MessageBody() data: { exchange: string; queue: string },
    @ConnectedSocket() client: Socket,
  ) {
    const { exchange, queue } = data;
    const subscriptionKey = `${exchange}:${queue}`;

    if (!this.subscriptions.has(subscriptionKey)) {
      this.subscriptions.set(subscriptionKey, new Set());
    }

    this.subscriptions.get(subscriptionKey).add(client);

    const success = this.messageBrokerService.subscribe(exchange, queue, (message) => {
      // this emit is already in messageBrokerService.onMessage
      // adding it will only cause duplicate messages
      // client.emit('message', { exchange, queue, message });
    });

    if (success) {
      client.on('disconnect', () => {
        const subscribers = this.subscriptions.get(subscriptionKey);
        if (subscribers) {
          subscribers.delete(client);
          if (subscribers.size === 0) {
            this.subscriptions.delete(subscriptionKey);
          }
        }
        this.messageBrokerService.unsubscribe(exchange, queue, () => {});
      });
      return { status: 'ok', message: 'Subscribed successfully' };
    } else {
      return { status: 'error', message: 'Failed to subscribe' };
    }
  }
}
</FILE>
<FILE path="/home/travis/Projects/message-queue/src/message-broker/message-broker.module.ts">
import { Module } from '@nestjs/common';
import { MessageBrokerService } from './message-broker.service';
import { MessageBrokerController } from './message-broker.controller';
import { MessageBrokerGateway } from './message-broker.gateway';
import { MessageStorageService } from '../message-storage/message-storage.service';

@Module({
  providers: [MessageBrokerService, MessageBrokerGateway, MessageStorageService],
  controllers: [MessageBrokerController],
})
export class MessageBrokerModule {}

</FILE>
<FILE path="/home/travis/Projects/message-queue/src/logger/custom-logger.ts">
import { ConsoleLogger, Injectable, Inject } from '@nestjs/common';
import * as fs from 'fs';
import * as path from 'path';

@Injectable()
export class CustomLogger extends ConsoleLogger {
  constructor(
    private logId: string,
  ) {
    super(logId);
    this.setLogLevels(['log', 'error', 'warn', 'debug', 'verbose']);
  }

  log(message: string, context?: string) {
    this.printMessage(message, 'log', context);
    // this.emitLogEvent('log', message);
  }

  warn(message: string, context?: string) {
    this.printMessage(message, 'warn', context);
    // this.emitLogEvent('warn', message);
  }

  error(message: string, trace?: string, context?: string) {
    this.printMessage(message, 'error', context);
    // this.emitLogEvent('error', message);
    if (trace) {
      this.printMessage(trace, 'error', context);
    }
  }

  debug(message: string, context?: string) {
    this.printMessage(message, 'debug', context);
  }

  verbose(message: string, context?: string) {
    this.printMessage(message, 'verbose', context);
  }

  private printMessage(message: string, logLevel: string, context?: string) {
    const output = context ? `[${context}] ${message}` : message;
    console.log(`[${this.getNow()}] [${logLevel.toUpperCase()}] [${this.logId}] ${output}`);
  }

  private getNow(): string {
    return new Date().toISOString();
  }

  static write_to_file(message: string) {
    const logFile = path.join(process.cwd(), 'start:dev.stdout.txt');
    fs.appendFile(logFile, message, (err) => {
      if (err) {
        console.error('Failed to write to log file:', err);
      }
    });
  }

  static clearSTDOUT() {
    const logFile = path.join(process.cwd(), 'start:dev.stdout.txt');
    try {
      fs.writeFileSync(logFile, '');
      console.log(`Log file cleared at ${logFile}`);
    } catch (error) {
      console.error('Failed to clear log file:', error);
    }
  }
}
</FILE>
<FILE path="/home/travis/Projects/message-queue/src/main.ts">
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { CustomLogger } from './logger/custom-logger';
import { NestExpressApplication } from '@nestjs/platform-express';
import * as cookieParser from 'cookie-parser';
import { resolve } from 'path';
import { EventEmitter } from 'events';

async function bootstrap(logger: CustomLogger) {
  // Increase the maximum number of listeners
  EventEmitter.defaultMaxListeners = 100;

  const app = await NestFactory.create<NestExpressApplication>(AppModule, { logger });

  app.useStaticAssets(resolve('./src/public'));
  app.setBaseViewsDir(resolve('./src/views'));
  app.setViewEngine('ejs');

  app.use(cookieParser());

  // so browsers can use api
  app.enableCors({
    origin: '*',
  });

  await app.listen(3030);
}

// Create the CustomLogger
const logger = new CustomLogger('Bootstrap');

bootstrap(logger);

</FILE>
<FILE path="/home/travis/Projects/message-queue/src/app.module.ts">
import { Module } from '@nestjs/common';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { MessageBrokerModule } from './message-broker/message-broker.module';

@Module({
  imports: [MessageBrokerModule],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}

</FILE>
<FILE path="/home/travis/Projects/message-queue/src/app.service.ts">
import { Injectable } from '@nestjs/common';

@Injectable()
export class AppService {
  getHello(): string {
    return 'Hello World!';
  }
}

</FILE>
<FILE path="/home/travis/Projects/message-queue/src/app.controller.ts">
import { Controller, Get } from '@nestjs/common';
import { AppService } from './app.service';

@Controller()
export class AppController {
  constructor(private readonly appService: AppService) {}

  @Get()
  getHello(): string {
    return this.appService.getHello();
  }
}

</FILE>
<FILE path="/home/travis/Projects/message-queue/start:dev.stdout.txt">
c[[90m11:07:19 AM[0m] Starting compilation in watch mode...

[96msrc/message-storage/aerospike-adapter.ts[0m:[93m5[0m:[93m29[0m - [91merror[0m[90m TS2724: [0m'"aerospike"' has no exported member named 'Client'. Did you mean 'client'?

[7m5[0m   private client: Aerospike.Client;
[7m [0m [91m                            ~~~~~~[0m

[96msrc/message-storage/aerospike-adapter.ts[0m:[93m51[0m:[93m25[0m - [91merror[0m[90m TS2339: [0mProperty 'popLeft' does not exist on type 'typeof import("lists")'.

[7m51[0m         Aerospike.lists.popLeft('messages', 1),
[7m  [0m [91m                        ~~~~~~~[0m

[[90m11:07:21 AM[0m] Found 2 errors. Watching for file changes.


</FILE>
<FILE path="/home/travis/Projects/message-queue/test:consumer.stdout.txt">
No message available
No message available

</FILE>
<FILE path="/home/travis/Projects/message-queue/test:producer.stdout.txt">
Exchange created
Queue bound to exchange
Published message 1
Published message 2
Published message 3
Published message 4
Published message 5
Queue length: 5

</FILE>
<FILE path="/home/travis/Projects/message-queue/test:message-routing.stdout.txt">
Exchange 'exchange1' created
Exchange 'exchange2' created
Queue 'queue1' bound to exchange 'exchange1'
Queue 'queue2' bound to exchange 'exchange1'
Queue 'queue3' bound to exchange 'exchange2'
Queue 'queue4' bound to exchange 'exchange2'
Connected to WebSocket server
Subscription response for exchange1/queue1: { status: 'ok', message: 'Subscribed successfully' }
Subscription response for exchange1/queue2: { status: 'ok', message: 'Subscribed successfully' }
Subscription response for exchange2/queue3: { status: 'ok', message: 'Subscribed successfully' }
Subscription response for exchange2/queue4: { status: 'ok', message: 'Subscribed successfully' }
Published message to exchange 'exchange1', queue 'queue1': Message 1 for Queue 1
Published message to exchange 'exchange1', queue 'queue2': Message 1 for Queue 2
Received message via WebSocket from exchange1/queue1: Message 1 for Queue 1
Published message to exchange 'exchange2', queue 'queue3': Message 1 for Queue 3
Published message to exchange 'exchange2', queue 'queue4': Message 1 for Queue 4
Received message via WebSocket from exchange2/queue3: Message 1 for Queue 3
Received message via WebSocket from exchange1/queue2: Message 1 for Queue 2
Published message to exchange 'exchange1', queue 'queue1': Message 2 for Queue 1
Received message via WebSocket from exchange2/queue4: Message 1 for Queue 4
Published message to exchange 'exchange1', queue 'queue2': Message 2 for Queue 2
Received message via WebSocket from exchange1/queue1: Message 2 for Queue 1
Published message to exchange 'exchange2', queue 'queue3': Message 2 for Queue 3
Received message via WebSocket from exchange1/queue2: Message 2 for Queue 2
Published message to exchange 'exchange2', queue 'queue4': Message 2 for Queue 4
Received message via WebSocket from exchange2/queue3: Message 2 for Queue 3
Published message to exchange 'exchange1', queue 'queue1': Message 3 for Queue 1
Received message via WebSocket from exchange2/queue4: Message 2 for Queue 4
Published message to exchange 'exchange1', queue 'queue2': Message 3 for Queue 2
Received message via WebSocket from exchange1/queue1: Message 3 for Queue 1
Published message to exchange 'exchange2', queue 'queue3': Message 3 for Queue 3
Received message via WebSocket from exchange1/queue2: Message 3 for Queue 2
Published message to exchange 'exchange1', queue 'queue1': Message 4 for Queue 1
Received message via WebSocket from exchange2/queue3: Message 3 for Queue 3
Published message to exchange 'exchange1', queue 'queue2': Message 4 for Queue 2
Received message via WebSocket from exchange1/queue1: Message 4 for Queue 1
Published message to exchange 'exchange1', queue 'queue1': Message 5 for Queue 1
Received message via WebSocket from exchange1/queue2: Message 4 for Queue 2
Received message via WebSocket from exchange1/queue1: Message 5 for Queue 1

Summary of received messages:
exchange1/queue1: 5 message(s)
  1. Message 1 for Queue 1
  2. Message 2 for Queue 1
  3. Message 3 for Queue 1
  4. Message 4 for Queue 1
  5. Message 5 for Queue 1
exchange2/queue3: 3 message(s)
  1. Message 1 for Queue 3
  2. Message 2 for Queue 3
  3. Message 3 for Queue 3
exchange1/queue2: 4 message(s)
  1. Message 1 for Queue 2
  2. Message 2 for Queue 2
  3. Message 3 for Queue 2
  4. Message 4 for Queue 2
exchange2/queue4: 2 message(s)
  1. Message 1 for Queue 4
  2. Message 2 for Queue 4

Message routing test completed.

</FILE>
<FILE path="/home/travis/Projects/message-queue/test:websocket-client.stdout.txt">
Connected to WebSocket server
Subscription response: { status: 'ok', message: 'Subscribed successfully' }
Received message via WebSocket: {
  exchange: 'test-exchange',
  queue: 'test-queue',
  message: 'Test message 1'
}
Received message via WebSocket: {
  exchange: 'test-exchange',
  queue: 'test-queue',
  message: 'Test message 2'
}
Received message via WebSocket: {
  exchange: 'test-exchange',
  queue: 'test-queue',
  message: 'Test message 3'
}
Received message via WebSocket: {
  exchange: 'test-exchange',
  queue: 'test-queue',
  message: 'Test message 4'
}

</FILE>
<FILE path="src/message-storage/aerospike-adapter.ts" TARGET>
import { StorageAdapter } from './storage-adapter.interface';
import Aerospike from 'aerospike';

export class AerospikeAdapter implements StorageAdapter {
  private client: Aerospike.Client;
  private namespace: string;
  private set: string;

  maxRetries = 5;
  initialRetryDelay = 1000;

  constructor(config: { hosts: string[]; namespace: string; set: string }) {
    this.client = Aerospike.client({
      hosts: config.hosts,
    });
    this.namespace = config.namespace;
    this.set = config.set;
  }

  async connect(): Promise<void> {
    await this.client.connect();
  }

  async disconnect(): Promise<void> {
    await this.client.close();
  }

  isConnected(): boolean {
    return this.client.isConnected();
  }

  async rpush(key: string, value: string): Promise<void> {
    const aeroKey = new Aerospike.Key(this.namespace, this.set, key);
    await this.client.operate(aeroKey, [
      Aerospike.lists.append('messages', value),
    ]);
  }

  async lrange(key: string, start: number, stop: number): Promise<string[]> {
    const aeroKey = new Aerospike.Key(this.namespace, this.set, key);
    const result = await this.client.operate(aeroKey, [
      Aerospike.lists.getRange('messages', start, stop - start + 1),
    ]);
    return result.bins.messages as string[];
  }

  async lpop(key: string): Promise<string | null> {
    const aeroKey = new Aerospike.Key(this.namespace, this.set, key);
    try {
      const result = await this.client.operate(aeroKey, [
        Aerospike.lists.popLeft('messages', 1),
      ]);
      return result.bins.messages[0] as string;
    } catch (error) {
      if (error.code === Aerospike.status.ERR_BIN_NOT_FOUND) {
        return null;
      }
      throw error;
    }
  }

  async llen(key: string): Promise<number> {
    const aeroKey = new Aerospike.Key(this.namespace, this.set, key);
    try {
      const result = await this.client.operate(aeroKey, [
        Aerospike.lists.size('messages'),
      ]);
      return result.bins.messages as number;
    } catch (error) {
      if (error.code === Aerospike.status.ERR_BIN_NOT_FOUND) {
        return 0;
      }
      throw error;
    }
  }
}
</FILE>
<REQUEST>
fix errors in stdout
</REQUEST>