# NESTCODER

You are NestCoder, a HTMX, EJS and TypeScript/NestJS language coding assistant.

## INPUT: 

You will receive a TARGET <FILE/> in the EJS or TypeScript/NestJS language, some additional <FILE/>'s for context, and a change or refactor <REQUEST/>, from the user.

## OUTPUT:

You must answer with one or more <FILE/> tags, including files to be overwritten, in order to fulfill the user's request.

---

# EXAMPLE NESTCODER USAGE

## Suppose you're given the following INPUT:

<FILE path="/Users/v/vic/dev/tsbook/List/_.ts">
// A polymorphic List with two constructors:
// - Cons: appends an element to a list
// - Nil: the empty list
export type List<A>
  = { "$": "Cons", head: A, tail: List<A> }
  | { "$": "Nil" };
</FILE>

<FILE path="/Users/v/vic/dev/tsbook/List/map.ts" TARGET>
// The map function for List, to be implemented
import { List } from "./_";

export function map<A, B>(fn: (a: A) => B, list: List<A>): List<B> {
  ?
}
</FILE>

<REQUEST>
complete the map function
</REQUEST>

## Then, you must answer with the following OUTPUT:

<FILE path="/Users/v/vic/dev/tsbook/List/map.ts">
import { List } from "./_";

// Applies a function to each element of a list.
// - fn: the function to be applied
// - xs: the elements to apply fn to
// = a new list with fn applied to all elements
export function map<A, B>(xs: List<A>, fn: (a: A) => B): List<B> {
  switch (xs.$) {
    case "Cons": {
      var head = fn(xs.head);
      var tail = map(xs.tail, fn);
      return { $: "Cons", head, tail };
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
</FILE>

(Because it fulfills the user's request perfectly.)

---

# GUIDE FOR THE TYPESCRIPT LANGUAGE

- Your code must be inspired by pure functional programming languages like Haskell.

- Every file must declare only, and only one, top-level function or datatype.

- Functions must be pure, using switch instead of 'if-else' or 'case-of'.

- When defining local variables, align equal signs whenever possible.

- Use CamelCase for everything. (IMPORTANT)

- A 'Foo/Bar' top-level definition must be either on './Foo/Bar.ts' or './Foo/Bar/_.ts'. 

# GUIDE FOR THE EJS LANGUAGE

- Use HTMX for frontend.

## Top-Level Function

Every .ts file must define ONE top-level function. Example:

```typescript
// Calculates the size of an HTerm
// - term: the HTerm to measure
// = the number of nodes in the term
export function size(term: HTerm): number {
  switch (term.$) {
    case "Lam": {
      var bod_size = size(term.bod({$: "Var", nam: term.nam}));
      return 1 + bod_size;
    }
    case "App": {
      var fun_size = size(term.fun);
      var arg_size = size(term.arg);
      return 1 + fun_size + arg_size;
    }
    case "Var": {
      return 1;
    }
  }
}
```

Where:
- The function name is defined (e.g., 'size')
- Parameters are specified with their types (e.g., 'term: HTerm')
- The return type is specified (e.g., ': number')
- The function body uses a switch statement for pattern matching
- Local variables are used to make the code less horizontal

## Top-Level Datatype

Alternatively, a .ts file can also define a datatype (ADT). Example:

```typescript
// Represents a Higher-Order Abstract Syntax Term
// - Lam: lambda abstraction
// - App: function application
// - Var: variable
export type HTerm
  = { $: "Lam", bod: (x: HTerm) => HTerm }
  | { $: "App", fun: HTerm, arg: HTerm }
  | { $: "Var", nam: string }
```

ADTs must follow this convention:
- Constructors represented as objects
- The dollar-sign is used for the constructor name
- Other object fields are the constructor fields

## Idiomatic TypeScript Examples

Below are some additional idiomatic TypeScript in the purely functional style: 

### List/zip.ts

```typescript
import { List } from "./_";

// Combines two lists into a list of pairs
// - xs: the first input list
// - ys: the second input list
// = a new list of pairs, with length equal to the shorter input list
export function zip<A, B>(xs: List<A>, ys: List<B>): List<[A, B]> {
  switch (xs.$) {
    case "Cons": {
      switch (ys.$) {
        case "Cons": {
          var head = [xs.head, ys.head] as [A,B];
          var tail = zip(xs.tail, ys.tail);
          return { $: "Cons", head, tail };
        }
        case "Nil": {
          return { $: "Nil" };
        }
      }
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
```

### List/filter.ts

```typescript
import { List } from "./_";

// Filters a list based on a predicate function
// - xs: the input list
// - pred: the predicate function to test each element
// = a new list containing only elements that satisfy the predicate
export function filter<A>(xs: List<A>, pred: (a: A) => boolean): List<A> {
  switch (xs.$) {
    case "Cons": {
      var head = xs.head;
      var tail = filter(xs.tail, pred);
      return pred(xs.head) ? { $: "Cons", head, tail } : tail;
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
```

### Tree/_.ts

```typescript
// Represents a binary tree
// - Node: an internal node with a value and two subtrees
// - Leaf: a leaf node (empty)
export type Tree<A>
  = { $: "Node", val: A, left: Tree<A>, right: Tree<A> }
  | { $: "Leaf" };
```

### Tree/sum.ts

```typescript
import { Tree } from "./_";

// Sums all values in a numeric tree
// - tree: the tree to sum
// = the sum of all values in the tree
export function sum(tree: Tree<number>): number {
  switch (tree.$) {
    case "Node": {
      var left  = sum(tree.left);
      var right = sum(tree.right);
      return tree.val + left + right;
    }
    case "Leaf": {
      return 0;
    }
  }
}
```

### V3/_.ts

```typescript
// Represents a 3D vector
export type V3
  = { $: "V3", x: number, y: number, z: number };
```

### V3/dot.ts

```typescript
import { V3 } from "./_";

// Calculates the dot product of two 3D vectors
// - a: the first vector
// - b: the second vector
// = the dot product of a and b
export function dot(a: V3, b: V3): number {
  return a.x * b.x + a.y * b.y + a.z * b.z;
}
```

---

# NOTES

- Make ONLY the changes necessary to correctly fulfill the user's REQUEST.

- Do NOT fix, remove, complete or alter any parts unrelated to the REQUEST.

- Pay attention to the user's style, and mimic it as close as possible.

- Pay attention to the TypeScript examples and mimic their style as a default.

- Consult TypeScript guide to emit idiomatic correct code.

- Do NOT use or assume the existence of files that weren't shown to you.

- Be precise and careful in your modifications.

---

# TASK

You will now be given the actual INPUT you must work with.

<FILE path="/home/travis/Projects/message-queue/src/message-storage/storage-adapter.interface.ts">
export interface StorageAdapter {
  connect(): Promise<void>;
  disconnect(): Promise<void>;
  isConnected(): boolean;
  rpush(key: string, value: string): Promise<void>;
  lrange(key: string, start: number, stop: number): Promise<string[]>;
  lpop(key: string): Promise<string | null>;
  llen(key: string): Promise<number>;
  maxRetries: number;
  initialRetryDelay: number;
}
</FILE>
<FILE path="/home/travis/Projects/message-queue/src/message-storage/redis-adapter.ts">
import { StorageAdapter } from './storage-adapter.interface';
import Redis from 'ioredis';

export class RedisAdapter implements StorageAdapter {
  private client: Redis;

  maxRetries = 5;
  initialRetryDelay = 1000;

  constructor(config: { host: string; port: number }) {
    this.client = new Redis(config);
  }

  async connect(): Promise<void> {
    // Redis client automatically connects when created
  }

  async disconnect(): Promise<void> {
    await this.client.quit();
  }

  isConnected(): boolean {
    return this.client.status === 'ready';
  }

  async rpush(key: string, value: string): Promise<void> {
    await this.client.rpush(key, value);
  }

  async lrange(key: string, start: number, stop: number): Promise<string[]> {
    return await this.client.lrange(key, start, stop);
  }

  async lpop(key: string): Promise<string | null> {
    return await this.client.lpop(key);
  }

  async llen(key: string): Promise<number> {
    return await this.client.llen(key);
  }
}
</FILE>
<FILE path="/home/travis/Projects/message-queue/src/message-storage/message-storage.service.ts">
import { Injectable, OnModuleInit, OnModuleDestroy, Logger } from '@nestjs/common';
import { StorageAdapter } from './storage-adapter.interface';
import { IsdbAdapter } from './isdb-adapter';
import { RedisAdapter } from './redis-adapter';

type StorageType = 'isdb' | 'redis';

@Injectable()
export class MessageStorageService implements OnModuleInit, OnModuleDestroy {
  private storageAdapter: StorageAdapter;
  private logger = new Logger(MessageStorageService.name);
  private reconnectionInterval: NodeJS.Timeout;

  constructor() {
    const storageType = (process.env.STORAGE_TYPE as StorageType) || 'isdb';
    this.storageAdapter = this.createStorageAdapter(storageType);
  }

  private createStorageAdapter(storageType: StorageType): StorageAdapter {
    switch (storageType) {
      case 'isdb':
        return new IsdbAdapter({
          database: Number(process.env.ISDB_DATABASE || '1'),
          username: process.env.ISDB_USERNAME || 'root',
          password: process.env.ISDB_PASSWORD || 'root',
        });
      case 'redis':
        return new RedisAdapter({
          host: process.env.REDIS_HOST || 'localhost',
          port: parseInt(process.env.REDIS_PORT || '6379'),
        });
      default:
        throw new Error(`Unsupported storage type: ${storageType}`);
    }
  }

  async onModuleInit() {
    await this.connectWithRetry();
    this.startReconnectionInterval();
  }

  private startReconnectionInterval() {
    this.reconnectionInterval = setInterval(async () => {
      if (!this.storageAdapter.isConnected()) {
        this.logger.warn('Connection lost. Attempting to reconnect...');
        await this.connectWithRetry();
      }
    }, 5000);
  }

  private async connectWithRetry(retryCount = 0): Promise<void> {
    try {
      await this.storageAdapter.connect();
      this.logger.log('Successfully connected to the database');
    } catch (error) {
      if (retryCount < this.storageAdapter.maxRetries) {
        const delay = this.storageAdapter.initialRetryDelay * Math.pow(2, retryCount);
        this.logger.warn(`Failed to connect. Retrying in ${delay}ms...`);
        await new Promise(resolve => setTimeout(resolve, delay));
        await this.connectWithRetry(retryCount + 1);
      } else {
        this.logger.error('Max retries reached. Unable to connect to the database.');
        this.logger.error(error);
      }
    }
  }

  async onModuleDestroy() {
    clearInterval(this.reconnectionInterval);
    await this.storageAdapter.disconnect();
  }

  private getQueueKey(exchangeName: string, queueName: string): string {
    return `${exchangeName}:${queueName}`;
  }

  async saveMessage(exchangeName: string, queueName: string, message: any): Promise<void> {
    const queueKey = this.getQueueKey(exchangeName, queueName);
    const messageData = JSON.stringify({
      timestamp: Date.now(),
      content: message
    });

    try {
      await this.storageAdapter.rpush(queueKey, messageData);
    } catch (error) {
      this.logger.error(`Failed to save message: ${error.message}`);
    }
  }

  async getMessages(exchangeName: string, queueName: string, count: number = 1): Promise<any[]> {
    const queueKey = this.getQueueKey(exchangeName, queueName);
    try {
      const messages = await this.storageAdapter.lrange(queueKey, 0, count - 1);
      return messages.map(msg => JSON.parse(msg));
    } catch (error) {
      this.logger.error(`Failed to get messages: ${error.message}`);
      return [];
    }
  }

  async removeMessage(exchangeName: string, queueName: string): Promise<any> {
    const queueKey = this.getQueueKey(exchangeName, queueName);
    try {
      const message = await this.storageAdapter.lpop(queueKey);
      return message ? JSON.parse(message) : null;
    } catch (error) {
      this.logger.error(`Failed to remove message: ${error.message}`);
      return null;
    }
  }

  async getQueueLength(exchangeName: string, queueName: string): Promise<number> {
    const queueKey = this.getQueueKey(exchangeName, queueName);
    try {
      return await this.storageAdapter.llen(queueKey);
    } catch (error) {
      this.logger.error(`Failed to get queue length: ${error.message}`);
      return 0;
    }
  }
}
</FILE>
<FILE path="/home/travis/Projects/message-queue/src/logger/custom-logger.ts">
import { ConsoleLogger, Injectable, Inject } from '@nestjs/common';
import * as fs from 'fs';
import * as path from 'path';

@Injectable()
export class CustomLogger extends ConsoleLogger {
  constructor(
    private logId: string,
  ) {
    super(logId);
    this.setLogLevels(['log', 'error', 'warn', 'debug', 'verbose']);
  }

  log(message: string, context?: string) {
    this.printMessage(message, 'log', context);
    // this.emitLogEvent('log', message);
  }

  warn(message: string, context?: string) {
    this.printMessage(message, 'warn', context);
    // this.emitLogEvent('warn', message);
  }

  error(message: string, trace?: string, context?: string) {
    this.printMessage(message, 'error', context);
    // this.emitLogEvent('error', message);
    if (trace) {
      this.printMessage(trace, 'error', context);
    }
  }

  debug(message: string, context?: string) {
    this.printMessage(message, 'debug', context);
  }

  verbose(message: string, context?: string) {
    this.printMessage(message, 'verbose', context);
  }

  private printMessage(message: string, logLevel: string, context?: string) {
    const output = context ? `[${context}] ${message}` : message;
    console.log(`[${this.getNow()}] [${logLevel.toUpperCase()}] [${this.logId}] ${output}`);
  }

  private getNow(): string {
    return new Date().toISOString();
  }

  static write_to_file(message: string) {
    const logFile = path.join(process.cwd(), 'start:dev.stdout.txt');
    fs.appendFile(logFile, message, (err) => {
      if (err) {
        console.error('Failed to write to log file:', err);
      }
    });
  }

  static clearSTDOUT() {
    const logFile = path.join(process.cwd(), 'start:dev.stdout.txt');
    try {
      fs.writeFileSync(logFile, '');
      console.log(`Log file cleared at ${logFile}`);
    } catch (error) {
      console.error('Failed to clear log file:', error);
    }
  }
}
</FILE>
<FILE path="/home/travis/Projects/message-queue/src/app.module.ts">
import { Module } from '@nestjs/common';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { MessageBrokerModule } from './message-broker/message-broker.module';

@Module({
  imports: [MessageBrokerModule],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}

</FILE>
<FILE path="/home/travis/Projects/message-queue/src/main.ts">
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { CustomLogger } from './logger/custom-logger';
import { NestExpressApplication } from '@nestjs/platform-express';
import * as cookieParser from 'cookie-parser';
import { resolve } from 'path';
import { EventEmitter } from 'events';

async function bootstrap(logger: CustomLogger) {
  // Increase the maximum number of listeners
  EventEmitter.defaultMaxListeners = 100;

  const app = await NestFactory.create<NestExpressApplication>(AppModule, { logger });

  app.useStaticAssets(resolve('./src/public'));
  app.setBaseViewsDir(resolve('./src/views'));
  app.setViewEngine('ejs');

  app.use(cookieParser());

  // so browsers can use api
  app.enableCors({
    origin: '*',
  });

  await app.listen(3030);
}

// Create the CustomLogger
const logger = new CustomLogger('Bootstrap');

bootstrap(logger);

</FILE>
<FILE path="/home/travis/Projects/message-queue/client/dist/index.d.ts">
export declare class MessageQueueClient {
    private verbose;
    private axiosInstance;
    private socket;
    constructor(baseURL: string, config?: any);
    createExchange(name: string): Promise<any>;
    bind(exchange: string, queue: string, routingKey: string): Promise<any>;
    publish(exchange: string, routingKey: string, message: any): Promise<any>;
    consume(exchange: string, queue: string): Promise<any>;
    getQueueLength(exchange: string, queue: string): Promise<any>;
    connectWebSocket(): Promise<void>;
    subscribeToQueue(exchange: string, queue: string, callback: (message: any) => void): Promise<void>;
    disconnectWebSocket(): void;
}

</FILE>
<FILE path="/home/travis/Projects/message-queue/test/test-consumer.ts">
import axios from 'axios';

async function testConsumer() {
  const baseUrl = 'http://localhost:3030/message-broker';

  try {
    while (true) {
      const response = await axios.get(`${baseUrl}/consume/test-exchange/test-queue`);
      if (response.data.status === 'ok') {
        console.log('Received message:', response.data.message);
      } else {
        console.log('No message available');
        await new Promise(resolve => setTimeout(resolve, 1000)); // Wait for 1 second before trying again
      }
    }
  } catch (error) {
    console.error('Error:', error.response ? error.response.data : error.message);
  }
}

testConsumer();
</FILE>
<FILE path="/home/travis/Projects/message-queue/test/test-producer.ts">
import axios from 'axios';

async function testProducer() {
  const baseUrl = 'http://localhost:3030/message-broker';

  try {
    // Create an exchange
    await axios.post(`${baseUrl}/exchange`, { name: 'test-exchange' });
    console.log('Exchange created');

    // Bind a queue to the exchange
    await axios.post(`${baseUrl}/bind`, {
      exchange: 'test-exchange',
      queue: 'test-queue',
      routingKey: 'test-queue'
    });
    console.log('Queue bound to exchange');

    // Publish messages
    for (let i = 0; i < 5; i++) {
      await axios.post(`${baseUrl}/publish`, {
        exchange: 'test-exchange',
        routingKey: 'test-queue',
        message: `Test message ${i + 1}`
      });
      console.log(`Published message ${i + 1}`);
    }

    // Get queue length
    const response = await axios.get(`${baseUrl}/queue-length/test-exchange/test-queue`);
    console.log(`Queue length: ${response.data.length}`);

  } catch (error) {
    console.error('Error:', error.response ? error.response.data : error.message);
  }
}

testProducer();
</FILE>
<FILE path="/home/travis/Projects/message-queue/start:dev.stdout.txt">
c[[90m11:55:13 PM[0m] Starting compilation in watch mode...

[[90m11:55:15 PM[0m] Found 0 errors. Watching for file changes.

[2024-09-12T04:55:15.661Z] [LOG] [Bootstrap] [NestFactory] Starting Nest application...
[2024-09-12T04:55:15.669Z] [LOG] [Bootstrap] [InstanceLoader] AppModule dependencies initialized
[2024-09-12T04:55:15.669Z] [LOG] [Bootstrap] [InstanceLoader] MessageBrokerModule dependencies initialized
[2024-09-12T04:55:15.676Z] [LOG] [Bootstrap] [WebSocketsController] MessageBrokerGateway subscribed to the "subscribe" message
[2024-09-12T04:55:15.677Z] [LOG] [Bootstrap] [RoutesResolver] AppController {/}:
[2024-09-12T04:55:15.678Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/, GET} route
[2024-09-12T04:55:15.678Z] [LOG] [Bootstrap] [RoutesResolver] MessageBrokerController {/message-broker}:
[2024-09-12T04:55:15.678Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/message-broker/exchange, POST} route
[2024-09-12T04:55:15.678Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/message-broker/bind, POST} route
[2024-09-12T04:55:15.678Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/message-broker/publish, POST} route
[2024-09-12T04:55:15.679Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/message-broker/consume/:exchange/:queue, GET} route
[2024-09-12T04:55:15.679Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/message-broker/queue-length/:exchange/:queue, GET} route
[2024-09-12T04:55:15.762Z] [LOG] [Bootstrap] [MessageStorageService] Successfully connected to the database
[2024-09-12T04:55:15.763Z] [LOG] [Bootstrap] [NestApplication] Nest application successfully started
[2024-09-12T04:55:38.951Z] [ERROR] [Bootstrap] [MessageStorageService] Failed to remove message: "[object Object]" is not valid JSON
[2024-09-12T04:55:38.956Z] [ERROR] [Bootstrap] [MessageStorageService] Failed to remove message: "[object Object]" is not valid JSON
[2024-09-12T04:55:38.959Z] [ERROR] [Bootstrap] [MessageStorageService] Failed to remove message: "[object Object]" is not valid JSON
</FILE>
<FILE path="/home/travis/Projects/message-queue/test:consumer.stdout.txt">
No message available
No message available

</FILE>
<FILE path="/home/travis/Projects/message-queue/test:producer.stdout.txt">
Exchange created
Queue bound to exchange
Published message 1
Published message 2
Published message 3
Published message 4
Published message 5
Queue length: 5

</FILE>
<FILE path="src/message-storage/isdb-adapter.ts" TARGET>
import { StorageAdapter } from './storage-adapter.interface';
import { DatabaseClient } from 'database-client';

export class IsdbAdapter implements StorageAdapter {
  private client: DatabaseClient;
  private database: number;
  private username: string;
  private password: string;

  maxRetries = 5;
  initialRetryDelay = 1000;

  constructor(config: { database: number; username: string; password: string }) {
    this.database = config.database;
    this.username = config.username;
    this.password = config.password;
  }

  async connect(): Promise<void> {
    this.client = new DatabaseClient('http://localhost:6969');
    await this.client.createUser(this.username, this.password);
    await this.client.login(this.username, this.password);
    await this.client.assignUserToDatabase(this.database);
  }

  async disconnect(): Promise<void> {
    // Implement disconnect if needed
  }

  isConnected(): boolean {
    return this.client ? true : false;
  }

  async rpush(key: string, value: string): Promise<void> {
    await this.client.rpush(this.database, key, [value]);
  }

  async lrange(key: string, start: number, stop: number): Promise<string[]> {
    return await this.client.lrange(this.database, key, start, stop);
  }

  async lpop(key: string): Promise<string | null> {
    return await this.client.lpop(this.database, key);
  }

  async llen(key: string): Promise<number> {
    return await this.client.llen(this.database, key);
  }
}
</FILE>
<REQUEST>
Failed to remove message errors in stdout; work fine with redis adapter however.
</REQUEST>