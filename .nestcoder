# NESTCODER

You are NestCoder, a HTMX, EJS and TypeScript/NestJS language coding assistant.

## INPUT: 

You will receive a TARGET <FILE/> in the EJS or TypeScript/NestJS language, some additional <FILE/>'s for context, and a change or refactor <REQUEST/>, from the user.

## OUTPUT:

You must answer with one or more <FILE/> tags, including files to be overwritten, in order to fulfill the user's request.

---

# EXAMPLE NESTCODER USAGE

## Suppose you're given the following INPUT:

<FILE path="/Users/v/vic/dev/tsbook/List/_.ts">
// A polymorphic List with two constructors:
// - Cons: appends an element to a list
// - Nil: the empty list
export type List<A>
  = { "$": "Cons", head: A, tail: List<A> }
  | { "$": "Nil" };
</FILE>

<FILE path="/Users/v/vic/dev/tsbook/List/map.ts" TARGET>
// The map function for List, to be implemented
import { List } from "./_";

export function map<A, B>(fn: (a: A) => B, list: List<A>): List<B> {
  ?
}
</FILE>

<REQUEST>
complete the map function
</REQUEST>

## Then, you must answer with the following OUTPUT:

<FILE path="/Users/v/vic/dev/tsbook/List/map.ts">
import { List } from "./_";

// Applies a function to each element of a list.
// - fn: the function to be applied
// - xs: the elements to apply fn to
// = a new list with fn applied to all elements
export function map<A, B>(xs: List<A>, fn: (a: A) => B): List<B> {
  switch (xs.$) {
    case "Cons": {
      var head = fn(xs.head);
      var tail = map(xs.tail, fn);
      return { $: "Cons", head, tail };
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
</FILE>

(Because it fulfills the user's request perfectly.)

---

# GUIDE FOR THE TYPESCRIPT LANGUAGE

- Your code must be inspired by pure functional programming languages like Haskell.

- Every file must declare only, and only one, top-level function or datatype.

- Functions must be pure, using switch instead of 'if-else' or 'case-of'.

- When defining local variables, align equal signs whenever possible.

- Use CamelCase for everything. (IMPORTANT)

- A 'Foo/Bar' top-level definition must be either on './Foo/Bar.ts' or './Foo/Bar/_.ts'. 

# GUIDE FOR THE EJS LANGUAGE

- Use HTMX for frontend.

## Top-Level Function

Every .ts file must define ONE top-level function. Example:

```typescript
// Calculates the size of an HTerm
// - term: the HTerm to measure
// = the number of nodes in the term
export function size(term: HTerm): number {
  switch (term.$) {
    case "Lam": {
      var bod_size = size(term.bod({$: "Var", nam: term.nam}));
      return 1 + bod_size;
    }
    case "App": {
      var fun_size = size(term.fun);
      var arg_size = size(term.arg);
      return 1 + fun_size + arg_size;
    }
    case "Var": {
      return 1;
    }
  }
}
```

Where:
- The function name is defined (e.g., 'size')
- Parameters are specified with their types (e.g., 'term: HTerm')
- The return type is specified (e.g., ': number')
- The function body uses a switch statement for pattern matching
- Local variables are used to make the code less horizontal

## Top-Level Datatype

Alternatively, a .ts file can also define a datatype (ADT). Example:

```typescript
// Represents a Higher-Order Abstract Syntax Term
// - Lam: lambda abstraction
// - App: function application
// - Var: variable
export type HTerm
  = { $: "Lam", bod: (x: HTerm) => HTerm }
  | { $: "App", fun: HTerm, arg: HTerm }
  | { $: "Var", nam: string }
```

ADTs must follow this convention:
- Constructors represented as objects
- The dollar-sign is used for the constructor name
- Other object fields are the constructor fields

## Idiomatic TypeScript Examples

Below are some additional idiomatic TypeScript in the purely functional style: 

### List/zip.ts

```typescript
import { List } from "./_";

// Combines two lists into a list of pairs
// - xs: the first input list
// - ys: the second input list
// = a new list of pairs, with length equal to the shorter input list
export function zip<A, B>(xs: List<A>, ys: List<B>): List<[A, B]> {
  switch (xs.$) {
    case "Cons": {
      switch (ys.$) {
        case "Cons": {
          var head = [xs.head, ys.head] as [A,B];
          var tail = zip(xs.tail, ys.tail);
          return { $: "Cons", head, tail };
        }
        case "Nil": {
          return { $: "Nil" };
        }
      }
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
```

### List/filter.ts

```typescript
import { List } from "./_";

// Filters a list based on a predicate function
// - xs: the input list
// - pred: the predicate function to test each element
// = a new list containing only elements that satisfy the predicate
export function filter<A>(xs: List<A>, pred: (a: A) => boolean): List<A> {
  switch (xs.$) {
    case "Cons": {
      var head = xs.head;
      var tail = filter(xs.tail, pred);
      return pred(xs.head) ? { $: "Cons", head, tail } : tail;
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
```

### Tree/_.ts

```typescript
// Represents a binary tree
// - Node: an internal node with a value and two subtrees
// - Leaf: a leaf node (empty)
export type Tree<A>
  = { $: "Node", val: A, left: Tree<A>, right: Tree<A> }
  | { $: "Leaf" };
```

### Tree/sum.ts

```typescript
import { Tree } from "./_";

// Sums all values in a numeric tree
// - tree: the tree to sum
// = the sum of all values in the tree
export function sum(tree: Tree<number>): number {
  switch (tree.$) {
    case "Node": {
      var left  = sum(tree.left);
      var right = sum(tree.right);
      return tree.val + left + right;
    }
    case "Leaf": {
      return 0;
    }
  }
}
```

### V3/_.ts

```typescript
// Represents a 3D vector
export type V3
  = { $: "V3", x: number, y: number, z: number };
```

### V3/dot.ts

```typescript
import { V3 } from "./_";

// Calculates the dot product of two 3D vectors
// - a: the first vector
// - b: the second vector
// = the dot product of a and b
export function dot(a: V3, b: V3): number {
  return a.x * b.x + a.y * b.y + a.z * b.z;
}
```

---

# NOTES

- Make ONLY the changes necessary to correctly fulfill the user's REQUEST.

- Do NOT fix, remove, complete or alter any parts unrelated to the REQUEST.

- Pay attention to the user's style, and mimic it as close as possible.

- Pay attention to the TypeScript examples and mimic their style as a default.

- Consult TypeScript guide to emit idiomatic correct code.

- Do NOT use or assume the existence of files that weren't shown to you.

- Be precise and careful in your modifications.

---

# TASK

You will now be given the actual INPUT you must work with.

<FILE path="/home/travis/Projects/message-queue/client/src/index.ts">
import axios, { AxiosInstance } from 'axios';
import { io, Socket } from 'socket.io-client';

export class MessageQueueClient {
  private verbose: boolean = false;
  private axiosInstance: AxiosInstance;
  private socket: Socket | null = null;

  constructor(baseURL: string, config?: any) {
    if (config) {
      this.verbose = config.verbose;
    }
    this.axiosInstance = axios.create({
      baseURL,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  }

  async createExchange(name: string): Promise<any> {
    const response = await this.axiosInstance.post('/message-broker/exchange', { name });
    return response.data;
  }

  async bind(exchange: string, queue: string, routingKey: string): Promise<any> {
    const response = await this.axiosInstance.post('/message-broker/bind', { exchange, queue, routingKey });
    return response.data;
  }

  async publish(exchange: string, routingKey: string, message: any): Promise<any> {
    const response = await this.axiosInstance.post('/message-broker/publish', { exchange, routingKey, message });
    return response.data;
  }

  async consume(exchange: string, queue: string): Promise<any> {
    const response = await this.axiosInstance.get(`/message-broker/consume/${exchange}/${queue}`);
    return response.data;
  }

  async getQueueLength(exchange: string, queue: string): Promise<any> {
    const response = await this.axiosInstance.get(`/message-broker/queue-length/${exchange}/${queue}`);
    return response.data;
  }

  connectWebSocket(): Promise<void> {
    return new Promise((resolve) => {
      this.socket = io(this.axiosInstance.defaults.baseURL);
      this.socket.on('connect', () => {
        if (this.verbose) {
          console.log('Connected to WebSocket server');
        }
        resolve();
      });
    });
  }

  subscribeToQueue(exchange: string, queue: string, callback: (message: any) => void): Promise<void> {
    return new Promise((resolve) => {
      if (!this.socket) {
        throw new Error('WebSocket is not connected. Call connectWebSocket() first.');
      }
      if (this.verbose) {
        console.log(`subscribeToQueue: ${exchange} ${queue}`);
      }
      this.socket.emit('subscribe', { exchange, queue }, (response: any) => {
        console.log(`Subscription response for ${exchange}/${queue}:`, response);
        this.socket!.on('message', (data) => {
          if (data.exchange === exchange && data.queue === queue) {
            if (this.verbose) {
              console.log(`subscribeToQueue.callback: ${data.exchange} === ${exchange} && ${data.queue} === ${queue}`, data.message);
            }
            callback(data.message);
          }
        });
        resolve();
      });
    });
  }

  disconnectWebSocket(): void {
    if (this.socket) {
      this.socket.close();
      this.socket = null;
    }
  }
}
</FILE>
<FILE path="/home/travis/Projects/message-queue/src/message-broker/message-broker.service.ts">
import { Injectable } from '@nestjs/common';
import { MessageStorageService } from '../message-storage/message-storage.service';
import { Exchange } from '../exchange/exchange';
import { EventEmitter } from 'events';

@Injectable()
export class MessageBrokerService {
  private exchanges: Map<string, Exchange> = new Map();
  private eventEmitter: EventEmitter = new EventEmitter();

  constructor(private messageStorage: MessageStorageService) {}

  createExchange(name: string): Exchange {
    if (!this.exchanges.has(name)) {
      const exchange = new Exchange(name, this.messageStorage);
      this.exchanges.set(name, exchange);
      return exchange;
    }
    return this.exchanges.get(name);
  }

  getExchange(name: string): Exchange | undefined {
    return this.exchanges.get(name);
  }

  async publish(exchangeName: string, routingKey: string, message: any): Promise<boolean> {
    const exchange = this.getExchange(exchangeName);
    if (exchange) {
      await exchange.publish(routingKey, message);
      // Emit the message to all bound queues
      const boundQueues = exchange.getBoundQueues(routingKey);
      for (const queue of boundQueues) {
        this.eventEmitter.emit('message', exchangeName, queue, message);
      }
      // console.log(`Published message to ${exchangeName}/${routingKey}:`, message);
      return true;
    }
    return false;
  }

  async consume(exchangeName: string, queueName: string): Promise<any> {
    const exchange = this.getExchange(exchangeName);
    if (exchange) {
      return await exchange.consume(queueName);
    }
    return null;
  }

  bind(exchangeName: string, queueName: string, routingKey: string): boolean {
    const exchange = this.getExchange(exchangeName);
    if (exchange) {
      exchange.bind(queueName, routingKey);
      return true;
    }
    return false;
  }

  subscribe(exchangeName: string, queueName: string, callback: (message: any) => void): boolean {
    // console.log(`Subscribing to ${exchangeName}/${queueName}`);
    this.eventEmitter.on('message', (exchange, queue, message) => {
      if (exchange === exchangeName && queue === queueName) {
        callback(message);
      }
    });
    return true;
  }

  unsubscribe(exchangeName: string, queueName: string, callback: (message: any) => void): boolean {
    this.eventEmitter.removeListener('message', callback);
    return true;
  }

  async getQueueLength(exchangeName: string, queueName: string): Promise<number> {
    const exchange = this.getExchange(exchangeName);
    if (exchange) {
      return await exchange.getQueueLength(queueName);
    }
    return 0;
  }

  onMessage(callback: (exchange: string, queue: string, message: any) => void) {
    this.eventEmitter.on('message', callback);
  }
}
</FILE>
<FILE path="/home/travis/Projects/message-queue/src/message-broker/message-broker.gateway.ts">
import {
  WebSocketGateway,
  SubscribeMessage,
  MessageBody,
  ConnectedSocket,
  WebSocketServer,
} from '@nestjs/websockets';
import { Server, Socket } from 'socket.io';
import { MessageBrokerService } from './message-broker.service';

@WebSocketGateway()
export class MessageBrokerGateway {
  @WebSocketServer()
  server: Server;

  private subscriptions: Map<string, Set<Socket>> = new Map();

  constructor(private readonly messageBrokerService: MessageBrokerService) {
    this.subscribeToAllExchanges();
  }

  private subscribeToAllExchanges() {
    this.messageBrokerService.onMessage(async (exchange, queue, message) => {
      const subscriptionKey = `${exchange}:${queue}`;
      const subscribers = this.subscriptions.get(subscriptionKey);
      if (subscribers) {
        // Consume the message from the queue
        await this.messageBrokerService.consume(exchange, queue);
        subscribers.forEach(subscriber => {
          subscriber.emit('message', { exchange, queue, message });
        });
      }
    });
  }

  @SubscribeMessage('subscribe')
  handleSubscribe(
    @MessageBody() data: { exchange: string; queue: string },
    @ConnectedSocket() client: Socket,
  ) {
    const { exchange, queue } = data;
    const subscriptionKey = `${exchange}:${queue}`;

    if (!this.subscriptions.has(subscriptionKey)) {
      this.subscriptions.set(subscriptionKey, new Set());
    }

    this.subscriptions.get(subscriptionKey).add(client);

    const success = this.messageBrokerService.subscribe(exchange, queue, (message) => {
      // this emit is already in messageBrokerService.onMessage
      // adding it will only cause duplicate messages
      // client.emit('message', { exchange, queue, message });
    });

    if (success) {
      client.on('disconnect', () => {
        const subscribers = this.subscriptions.get(subscriptionKey);
        if (subscribers) {
          subscribers.delete(client);
          if (subscribers.size === 0) {
            this.subscriptions.delete(subscriptionKey);
          }
        }
        this.messageBrokerService.unsubscribe(exchange, queue, () => {});
      });
      return { status: 'ok', message: 'Subscribed successfully' };
    } else {
      return { status: 'error', message: 'Failed to subscribe' };
    }
  }
}
</FILE>
<FILE path="/home/travis/Projects/message-queue/src/message-storage/message-storage.service.ts">
import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';
import Redis from 'ioredis';
import { DatabaseClient } from 'database-client';

type StorageType = 'isdb' | 'redis';

@Injectable()
export class MessageStorageService implements OnModuleInit, OnModuleDestroy {
  private isdbClient: DatabaseClient;
  private isdbDatabase: number;
  private isdbUsername: string;
  private isdbPassword: string;
  private redisClient: Redis;
  private storageType: StorageType;

  constructor() {
    this.storageType = (process.env.STORAGE_TYPE as StorageType) || 'redis';
    if (this.storageType === 'isdb') {
      this.isdbDatabase = Number(process.env.ISDB_DATABASE || '1');
      this.isdbUsername = process.env.ISDB_USERNAME || 'root';
      this.isdbPassword = process.env.ISDB_PASSWORD || 'root';
    }
  }

  async onModuleInit() {
    if (this.storageType === 'isdb') {
      this.isdbClient = new DatabaseClient('http://localhost:6969');
      await this.isdbClient.createUser(this.isdbUsername, this.isdbPassword);
      await this.isdbClient.login(this.isdbUsername, this.isdbPassword);
      await this.isdbClient.assignUserToDatabase(1)

    } else {
      this.redisClient = new Redis({
        host: process.env.REDIS_HOST || 'localhost',
        port: parseInt(process.env.REDIS_PORT || '6379'),
      });
    }
  }

  async onModuleDestroy() {
    if (this.storageType === 'redis') {
      await this.redisClient.quit();
    }
  }

  private getQueueKey(exchangeName: string, queueName: string): string {
    return `${exchangeName}:${queueName}`;
  }

  async saveMessage(exchangeName: string, queueName: string, message: any): Promise<void> {
    const queueKey = this.getQueueKey(exchangeName, queueName);
    const messageData = JSON.stringify({
      timestamp: Date.now(),
      content: message
    });

    if (this.storageType === 'isdb') {
      await this.isdbClient.rpush(this.isdbDatabase, queueKey, [messageData]);
    } else {
      await this.redisClient.rpush(queueKey, messageData);
    }
  }

  async getMessages(exchangeName: string, queueName: string, count: number = 1): Promise<any[]> {
    const queueKey = this.getQueueKey(exchangeName, queueName);
    let messages: string[];

    if (this.storageType === 'isdb') {
      messages = await this.isdbClient.lrange(this.isdbDatabase, queueKey, 0, count - 1);
    } else {
      messages = await this.redisClient.lrange(queueKey, 0, count - 1);
    }

    return messages.map(msg => JSON.parse(msg));
  }

  async removeMessage(exchangeName: string, queueName: string): Promise<any> {
    // console.log('removeMessage', exchangeName, queueName);
    const queueKey = this.getQueueKey(exchangeName, queueName);
    let message: string;

    if (this.storageType === 'isdb') {
      message = await this.isdbClient.lpop(this.isdbDatabase, queueKey);
    } else {
      message = await this.redisClient.lpop(queueKey);
      if (message) {
        message = JSON.parse(message);
      }
    }

    return message;
  }

  async getQueueLength(exchangeName: string, queueName: string): Promise<number> {
    const queueKey = this.getQueueKey(exchangeName, queueName);

    if (this.storageType === 'isdb') {
      return await this.isdbClient.llen(this.isdbDatabase, queueKey);
    } else {
      return await this.redisClient.llen(queueKey);
    }
  }
}
</FILE>
<FILE path="/home/travis/Projects/message-queue/src/queue/queue.ts">
import { EventEmitter } from 'events';
import { MessageStorageService } from '../message-storage/message-storage.service';

export class Queue {
  private eventEmitter = new EventEmitter();

  constructor(
    private exchangeName: string,
    private queueName: string,
    private messageStorage: MessageStorageService
  ) {}

  async enqueue(message: any) {
    await this.messageStorage.saveMessage(this.exchangeName, this.queueName, message);
    this.eventEmitter.emit('message', message);
  }

  async dequeue(): Promise<any> {
    const message = await this.messageStorage.removeMessage(this.exchangeName, this.queueName);
    if (message) {
      return message.content;
    }
    
    return new Promise((resolve) => {
      this.eventEmitter.once('message', async (newMessage) => {
        await this.messageStorage.removeMessage(this.exchangeName, this.queueName);
        resolve(newMessage);
      });
    });
  }

  subscribe(callback: (message: any) => void) {
    this.eventEmitter.on('message', callback);
  }

  unsubscribe(callback: (message: any) => void) {
    this.eventEmitter.off('message', callback);
  }
}

</FILE>
<FILE path="/home/travis/Projects/message-queue/src/exchange/exchange.ts">
import { MessageStorageService } from '../message-storage/message-storage.service';
import { Queue } from '../queue/queue';

export class Exchange {
  private queues: Map<string, Queue> = new Map();
  private bindings: Map<string, Set<string>> = new Map();
  private subscriptions: Map<string, Set<(message: any) => void>> = new Map();

  constructor(
    private name: string,
    private messageStorage: MessageStorageService
  ) {}

  bind(queueName: string, routingKey: string) {
    if (!this.queues.has(queueName)) {
      this.queues.set(queueName, new Queue(this.name, queueName, this.messageStorage));
    }
    if (!this.bindings.has(routingKey)) {
      this.bindings.set(routingKey, new Set());
    }
    this.bindings.get(routingKey).add(queueName);
  }

  async publish(routingKey: string, message: any) {
    const boundQueues = this.bindings.get(routingKey) || new Set();
    for (const queueName of boundQueues) {
      const queue = this.queues.get(queueName);
      if (queue) {
        await queue.enqueue(message);
      }
    }
    
    // Notify subscribers
    const subscribers = this.subscriptions.get(routingKey) || new Set();
    subscribers.forEach(callback => callback(message));
  }

  async consume(queueName: string): Promise<any> {
    const queue = this.queues.get(queueName);
    if (queue) {
      return await queue.dequeue();
    }
    return null;
  }

  subscribe(routingKey: string, callback: (message: any) => void) {
    if (!this.subscriptions.has(routingKey)) {
      this.subscriptions.set(routingKey, new Set());
    }
    this.subscriptions.get(routingKey).add(callback);
  }

  unsubscribe(routingKey: string, callback: (message: any) => void) {
    const subscribers = this.subscriptions.get(routingKey);
    if (subscribers) {
      subscribers.delete(callback);
      if (subscribers.size === 0) {
        this.subscriptions.delete(routingKey);
      }
    }
  }

  async getQueueLength(queueName: string): Promise<number> {
    return await this.messageStorage.getQueueLength(this.name, queueName);
  }

  getBoundQueues(routingKey: string): string[] {
    return Array.from(this.bindings.get(routingKey) || []);
  }
}
</FILE>
<FILE path="/home/travis/Projects/message-queue/test/test-consumer.ts">
import axios from 'axios';

async function testConsumer() {
  const baseUrl = 'http://localhost:3030/message-broker';

  try {
    while (true) {
      const response = await axios.get(`${baseUrl}/consume/test-exchange/test-queue`);
      if (response.data.status === 'ok') {
        console.log('Received message:', response.data.message);
      } else {
        console.log('No message available');
        await new Promise(resolve => setTimeout(resolve, 1000)); // Wait for 1 second before trying again
      }
    }
  } catch (error) {
    console.error('Error:', error.response ? error.response.data : error.message);
  }
}

testConsumer();
</FILE>
<FILE path="/home/travis/Projects/message-queue/test/test-producer.ts">
import axios from 'axios';

async function testProducer() {
  const baseUrl = 'http://localhost:3030/message-broker';

  try {
    // Create an exchange
    await axios.post(`${baseUrl}/exchange`, { name: 'test-exchange' });
    console.log('Exchange created');

    // Bind a queue to the exchange
    await axios.post(`${baseUrl}/bind`, {
      exchange: 'test-exchange',
      queue: 'test-queue',
      routingKey: 'test-queue'
    });
    console.log('Queue bound to exchange');

    // Publish messages
    for (let i = 0; i < 5; i++) {
      await axios.post(`${baseUrl}/publish`, {
        exchange: 'test-exchange',
        routingKey: 'test-queue',
        message: `Test message ${i + 1}`
      });
      console.log(`Published message ${i + 1}`);
    }

    // Get queue length
    const response = await axios.get(`${baseUrl}/queue-length/test-exchange/test-queue`);
    console.log(`Queue length: ${response.data.length}`);

  } catch (error) {
    console.error('Error:', error.response ? error.response.data : error.message);
  }
}

testProducer();
</FILE>
<FILE path="/home/travis/Projects/message-queue/test/test-message-routing.ts">
import axios from 'axios';
import { io, Socket } from 'socket.io-client';

const baseUrl = 'http://localhost:3030/message-broker';
const wsUrl = 'http://localhost:3030';

async function createExchange(name: string) {
  await axios.post(`${baseUrl}/exchange`, { name });
  console.log(`Exchange '${name}' created`);
}

async function bindQueue(exchange: string, queue: string) {
  await axios.post(`${baseUrl}/bind`, {
    exchange,
    queue,
    routingKey: queue
  });
  console.log(`Queue '${queue}' bound to exchange '${exchange}'`);
}

async function publishMessage(exchange: string, queue: string, message: string) {
  await axios.post(`${baseUrl}/publish`, {
    exchange,
    routingKey: queue,
    message
  });
  console.log(`Published message to exchange '${exchange}', queue '${queue}': ${message}`);
}

function createWebSocketClient(): Promise<Socket> {
  return new Promise((resolve) => {
    const socket = io(wsUrl);
    socket.on('connect', () => {
      console.log('Connected to WebSocket server');
      resolve(socket);
    });
  });
}

function subscribeToQueue(socket: Socket, exchange: string, queue: string): Promise<void> {
  return new Promise((resolve) => {
    socket.emit('subscribe', { exchange, queue }, (response) => {
      console.log(`Subscription response for ${exchange}/${queue}:`, response);
      resolve();
    });
  });
}

async function testMessageRouting() {
  try {
    // Create exchanges
    await createExchange('exchange1');
    await createExchange('exchange2');

    // Bind queues
    await bindQueue('exchange1', 'queue1');
    await bindQueue('exchange1', 'queue2');
    await bindQueue('exchange2', 'queue3');
    await bindQueue('exchange2', 'queue4');

    // Create WebSocket client
    const socket = await createWebSocketClient();

    // Subscribe to all queues
    await subscribeToQueue(socket, 'exchange1', 'queue1');
    await subscribeToQueue(socket, 'exchange1', 'queue2');
    await subscribeToQueue(socket, 'exchange2', 'queue3');
    await subscribeToQueue(socket, 'exchange2', 'queue4');

    // Set up message listener
    const receivedMessages: { [key: string]: string[] } = {};
    socket.on('message', (data) => {
      const key = `${data.exchange}/${data.queue}`;
      if (!receivedMessages[key]) {
        receivedMessages[key] = [];
      }
      receivedMessages[key].push(data.message);
      console.log(`Received message via WebSocket from ${key}:`, data.message);
    });

    // Publish messages
    await publishMessage('exchange1', 'queue1', 'Message 1 for Queue 1');
    await publishMessage('exchange1', 'queue2', 'Message 1 for Queue 2');
    await publishMessage('exchange2', 'queue3', 'Message 1 for Queue 3');
    await publishMessage('exchange2', 'queue4', 'Message 1 for Queue 4');
    await publishMessage('exchange1', 'queue1', 'Message 2 for Queue 1');
    await publishMessage('exchange1', 'queue2', 'Message 2 for Queue 2');
    await publishMessage('exchange2', 'queue3', 'Message 2 for Queue 3');
    await publishMessage('exchange2', 'queue4', 'Message 2 for Queue 4');
    await publishMessage('exchange1', 'queue1', 'Message 3 for Queue 1');
    await publishMessage('exchange1', 'queue2', 'Message 3 for Queue 2');
    await publishMessage('exchange2', 'queue3', 'Message 3 for Queue 3');
    await publishMessage('exchange1', 'queue1', 'Message 4 for Queue 1');
    await publishMessage('exchange1', 'queue2', 'Message 4 for Queue 2');
    await publishMessage('exchange1', 'queue1', 'Message 5 for Queue 1');

    // Wait for messages to be received
    await new Promise(resolve => setTimeout(resolve, 2000));

    // Print summary of received messages
    console.log('\nSummary of received messages:');
    for (const [key, messages] of Object.entries(receivedMessages)) {
      console.log(`${key}: ${messages.length} message(s)`);
      messages.forEach((msg, index) => {
        console.log(`  ${index + 1}. ${msg}`);
      });
    }

    // Close WebSocket connection
    socket.close();
    console.log('\nMessage routing test completed.');
  } catch (error) {
    console.error('Error:', error.response ? error.response.data : error.message);
  }
}

testMessageRouting();
</FILE>
<FILE path="/home/travis/Projects/message-queue/test/test-websocket-client.ts">
import { io } from 'socket.io-client';

const socket = io('http://localhost:3030');

socket.on('connect', () => {
  console.log('Connected to WebSocket server');

  // Subscribe to a queue
  socket.emit('subscribe', { exchange: 'test-exchange', queue: 'test-queue' }, (response) => {
    console.log('Subscription response:', response);
  });

  // Listen for messages
  socket.on('message', (data) => {
    console.log('Received message via WebSocket:', data);
  });
});

socket.on('disconnect', () => {
  console.log('Disconnected from WebSocket server');
});

// Keep the script running
setInterval(() => {}, 1000);
</FILE>
<FILE path="/home/travis/Projects/message-queue/src/logger/custom-logger.ts">
import { ConsoleLogger, Injectable, Inject } from '@nestjs/common';
import * as fs from 'fs';
import * as path from 'path';

@Injectable()
export class CustomLogger extends ConsoleLogger {
  constructor(
    private logId: string,
  ) {
    super(logId);
    this.setLogLevels(['log', 'error', 'warn', 'debug', 'verbose']);
  }

  log(message: string, context?: string) {
    this.printMessage(message, 'log', context);
    // this.emitLogEvent('log', message);
  }

  warn(message: string, context?: string) {
    this.printMessage(message, 'warn', context);
    // this.emitLogEvent('warn', message);
  }

  error(message: string, trace?: string, context?: string) {
    this.printMessage(message, 'error', context);
    // this.emitLogEvent('error', message);
    if (trace) {
      this.printMessage(trace, 'error', context);
    }
  }

  debug(message: string, context?: string) {
    this.printMessage(message, 'debug', context);
  }

  verbose(message: string, context?: string) {
    this.printMessage(message, 'verbose', context);
  }

  private printMessage(message: string, logLevel: string, context?: string) {
    const output = context ? `[${context}] ${message}` : message;
    console.log(`[${this.getNow()}] [${logLevel.toUpperCase()}] [${this.logId}] ${output}`);
  }

  private getNow(): string {
    return new Date().toISOString();
  }

  static write_to_file(message: string) {
    const logFile = path.join(process.cwd(), 'start:dev.stdout.txt');
    fs.appendFile(logFile, message, (err) => {
      if (err) {
        console.error('Failed to write to log file:', err);
      }
    });
  }

  static clearSTDOUT() {
    const logFile = path.join(process.cwd(), 'start:dev.stdout.txt');
    try {
      fs.writeFileSync(logFile, '');
      console.log(`Log file cleared at ${logFile}`);
    } catch (error) {
      console.error('Failed to clear log file:', error);
    }
  }
}
</FILE>
<FILE path="/home/travis/Projects/message-queue/src/app.module.ts">
import { Module } from '@nestjs/common';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { MessageBrokerModule } from './message-broker/message-broker.module';

@Module({
  imports: [MessageBrokerModule],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}

</FILE>
<FILE path="/home/travis/Projects/message-queue/src/main.ts">
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { CustomLogger } from './logger/custom-logger';
import { NestExpressApplication } from '@nestjs/platform-express';
import * as cookieParser from 'cookie-parser';
import { resolve } from 'path';

async function bootstrap(logger: CustomLogger) {
  const app = await NestFactory.create<NestExpressApplication>(AppModule, { logger });

  app.useStaticAssets(resolve('./src/public'));
  app.setBaseViewsDir(resolve('./src/views'));
  app.setViewEngine('ejs');

  app.use(cookieParser());

  // so browsers can use api
  app.enableCors({
    origin: '*',
  });

  await app.listen(3030);
}

// Create the CustomLogger
const logger = new CustomLogger('Bootstrap');

bootstrap(logger);

</FILE>
<FILE path="/home/travis/Projects/message-queue/benchmark:message-queue.stdout.txt">
Starting all e2e benchmarks
Starting e2e benchmark with message size 1 bytes and 1000 messages
Exchange created and queue bound
WebSocket connected
Subscription response for benchmark_exchange/benchmark_queue: { status: 'ok', message: 'Subscribed successfully' }
Published 100 messages
Published 200 messages
Published 300 messages
Published 400 messages
Published 500 messages
Published 600 messages
Published 700 messages
Published 800 messages
Published 900 messages
Published 1000 messages
Finished publishing 1000 messages
E2E Benchmark Results:
  Message Size: 1 bytes
  Number of Messages: 1000
  Messages Received: 999
  Total Duration: 30006ms
  Throughput: 33.29 messages/second
Disconnected from WebSocket
Starting e2e benchmark with message size 100 bytes and 1000 messages
Exchange created and queue bound
WebSocket connected
Subscription response for benchmark_exchange/benchmark_queue: { status: 'ok', message: 'Subscribed successfully' }
Published 100 messages
Published 200 messages
Published 300 messages
Published 400 messages
Published 500 messages
Published 600 messages
Published 700 messages
Published 800 messages
Published 900 messages
Published 1000 messages
Finished publishing 1000 messages
E2E Benchmark Results:
  Message Size: 100 bytes
  Number of Messages: 1000
  Messages Received: 999
  Total Duration: 30004ms
  Throughput: 33.30 messages/second
Disconnected from WebSocket
Starting e2e benchmark with message size 1000 bytes and 1000 messages
Exchange created and queue bound
WebSocket connected
Subscription response for benchmark_exchange/benchmark_queue: { status: 'ok', message: 'Subscribed successfully' }
Published 100 messages
Published 200 messages
Published 300 messages
Published 400 messages
Published 500 messages
Published 600 messages
Published 700 messages
Published 800 messages
Published 900 messages
Published 1000 messages
Finished publishing 1000 messages
E2E Benchmark Results:
  Message Size: 1000 bytes
  Number of Messages: 1000
  Messages Received: 999
  Total Duration: 30001ms
  Throughput: 33.30 messages/second
Disconnected from WebSocket
Starting e2e benchmark with message size 10000 bytes and 1000 messages
Exchange created and queue bound
WebSocket connected
Subscription response for benchmark_exchange/benchmark_queue: { status: 'ok', message: 'Subscribed successfully' }
Published 100 messages
Published 200 messages
Published 300 messages
Published 400 messages
Published 500 messages
Published 600 messages
Published 700 messages
Published 800 messages
Published 900 messages
Published 1000 messages
Finished publishing 1000 messages
E2E Benchmark Results:
  Message Size: 10000 bytes
  Number of Messages: 1000
  Messages Received: 999
  Total Duration: 30004ms
  Throughput: 33.30 messages/second
Disconnected from WebSocket
Starting e2e benchmark with message size 100000 bytes and 1000 messages
Exchange created and queue bound
WebSocket connected
Subscription response for benchmark_exchange/benchmark_queue: { status: 'ok', message: 'Subscribed successfully' }
Published 100 messages
Published 200 messages
Published 300 messages
Published 400 messages
Published 500 messages
Published 600 messages
Published 700 messages
Published 800 messages
Published 900 messages
Published 1000 messages
Finished publishing 1000 messages
E2E Benchmark Results:
  Message Size: 100000 bytes
  Number of Messages: 1000
  Messages Received: 998
  Total Duration: 30006ms
  Throughput: 33.26 messages/second
Disconnected from WebSocket
All e2e benchmarks completed

Benchmark Summary:
------------------
Message Size: 1 bytes, Throughput: 33.29 messages/second
Message Size: 100 bytes, Throughput: 33.30 messages/second
Message Size: 1000 bytes, Throughput: 33.30 messages/second
Message Size: 10000 bytes, Throughput: 33.30 messages/second
Message Size: 100000 bytes, Throughput: 33.26 messages/second

Average Throughput: 33.29 messages/second

</FILE>
<FILE path="/home/travis/Projects/message-queue/test:consumer.stdout.txt">
No message available
No message available

</FILE>
<FILE path="/home/travis/Projects/message-queue/test:producer.stdout.txt">
Exchange created
Queue bound to exchange
Published message 1
Published message 2
Published message 3
Published message 4
Published message 5
Queue length: 5

</FILE>
<FILE path="benchmarks/message-queue.benchmark.ts" TARGET>
import { Logger } from '@nestjs/common';
import { MessageQueueClient } from '../client/src/index';

const logger = new Logger('MessageQueueBenchmark');

const BASE_URL = 'http://localhost:3030';

function generateMessage(size: number): string {
  return 'x'.repeat(size);
}

async function runBenchmark(messageSize: number, numMessages: number): Promise<{ messageSize: number; throughput: number }> {
  const exchange = 'benchmark_exchange';
  const routingKey = 'benchmark_key';
  const queue = 'benchmark_queue';

  console.log(`Starting e2e benchmark with message size ${messageSize} bytes and ${numMessages} messages`);

  const client = new MessageQueueClient(BASE_URL, { verbose: false });

  try {
    await client.createExchange(exchange);
    await client.bind(exchange, queue, routingKey);
    console.log('Exchange created and queue bound');

    await client.connectWebSocket();
    console.log('WebSocket connected');

    let received = 0;
    const startTime = Date.now();
    let throughput = 0;

    const timeoutPromise = new Promise<void>((resolve) => {
      setTimeout(() => {
        resolve();
      }, 30000); // 30 seconds timeout
    });

    const benchmarkPromise = new Promise<void>((resolve) => {
      client.subscribeToQueue(exchange, queue, (message) => {
        received++;
        if (received === numMessages) {
          resolve();
        }
      });
    });

    const message = generateMessage(messageSize);
    for (let i = 0; i < numMessages; i++) {
      await client.publish(exchange, routingKey, message);
      if ((i + 1) % 100 === 0) {
        console.log(`Published ${i + 1} messages`);
      }
    }

    console.log(`Finished publishing ${numMessages} messages`);

    await Promise.race([benchmarkPromise, timeoutPromise]);

    const endTime = Date.now();
    const duration = endTime - startTime;
    throughput = (received / duration) * 1000;

    console.log(`E2E Benchmark Results:`);
    console.log(`  Message Size: ${messageSize} bytes`);
    console.log(`  Number of Messages: ${numMessages}`);
    console.log(`  Messages Received: ${received}`);
    console.log(`  Total Duration: ${duration}ms`);
    console.log(`  Throughput: ${throughput.toFixed(2)} messages/second`);

    return { messageSize, throughput };

  } catch (error) {
    console.error(`Error in e2e benchmark: ${error.message}`);
    if (error.stack) {
      console.error(`Stack trace: ${error.stack}`);
    }
    throw error;
  } finally {
    client.disconnectWebSocket();
    console.log('Disconnected from WebSocket');
  }
}

async function runAllBenchmarks(): Promise<void> {
  const messageSizes = [1, 100, 1000, 10000, 100000];
  const numMessages = 1000;

  console.log('Starting all e2e benchmarks');

  const results: { messageSize: number; throughput: number }[] = [];

  for (const size of messageSizes) {
    try {
      const result = await runBenchmark(size, numMessages);
      results.push(result);
      // Add a delay between benchmarks to allow for proper cleanup
      await new Promise(resolve => setTimeout(resolve, 5000));
    } catch (error) {
      console.error(`Failed to run e2e benchmark with size ${size}: ${error.message}`);
    }
  }

  console.log('All e2e benchmarks completed');

  // Output summary
  console.log('\nBenchmark Summary:');
  console.log('------------------');
  results.forEach(({ messageSize, throughput }) => {
    console.log(`Message Size: ${messageSize} bytes, Throughput: ${throughput.toFixed(2)} messages/second`);
  });

  const averageThroughput = results.reduce((sum, { throughput }) => sum + throughput, 0) / results.length;
  console.log(`\nAverage Throughput: ${averageThroughput.toFixed(2)} messages/second`);
}

runAllBenchmarks().catch((error) => {
  console.error('E2E Benchmark error:', error);
  process.exit(1);
});
</FILE>
<REQUEST>
when it comes to redis all 1000 messages are recieved except 1
</REQUEST>