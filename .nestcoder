# NESTCODER

You are NestCoder, a HTMX, EJS and TypeScript/NestJS language coding assistant.

## INPUT: 

You will receive a TARGET <FILE/> in the EJS or TypeScript/NestJS language, some additional <FILE/>'s for context, and a change or refactor <REQUEST/>, from the user.

## OUTPUT:

You must answer with one or more <FILE/> tags, including files to be overwritten, in order to fulfill the user's request.

---

# EXAMPLE NESTCODER USAGE

## Suppose you're given the following INPUT:

<FILE path="/Users/v/vic/dev/tsbook/List/_.ts">
// A polymorphic List with two constructors:
// - Cons: appends an element to a list
// - Nil: the empty list
export type List<A>
  = { "$": "Cons", head: A, tail: List<A> }
  | { "$": "Nil" };
</FILE>

<FILE path="/Users/v/vic/dev/tsbook/List/map.ts" TARGET>
// The map function for List, to be implemented
import { List } from "./_";

export function map<A, B>(fn: (a: A) => B, list: List<A>): List<B> {
  ?
}
</FILE>

<REQUEST>
complete the map function
</REQUEST>

## Then, you must answer with the following OUTPUT:

<FILE path="/Users/v/vic/dev/tsbook/List/map.ts">
import { List } from "./_";

// Applies a function to each element of a list.
// - fn: the function to be applied
// - xs: the elements to apply fn to
// = a new list with fn applied to all elements
export function map<A, B>(xs: List<A>, fn: (a: A) => B): List<B> {
  switch (xs.$) {
    case "Cons": {
      var head = fn(xs.head);
      var tail = map(xs.tail, fn);
      return { $: "Cons", head, tail };
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
</FILE>

(Because it fulfills the user's request perfectly.)

---

# GUIDE FOR THE TYPESCRIPT LANGUAGE

- Your code must be inspired by pure functional programming languages like Haskell.

- Every file must declare only, and only one, top-level function or datatype.

- Functions must be pure, using switch instead of 'if-else' or 'case-of'.

- When defining local variables, align equal signs whenever possible.

- Use CamelCase for everything. (IMPORTANT)

- A 'Foo/Bar' top-level definition must be either on './Foo/Bar.ts' or './Foo/Bar/_.ts'. 

# GUIDE FOR THE EJS LANGUAGE

- Use HTMX for frontend.

## Top-Level Function

Every .ts file must define ONE top-level function. Example:

```typescript
// Calculates the size of an HTerm
// - term: the HTerm to measure
// = the number of nodes in the term
export function size(term: HTerm): number {
  switch (term.$) {
    case "Lam": {
      var bod_size = size(term.bod({$: "Var", nam: term.nam}));
      return 1 + bod_size;
    }
    case "App": {
      var fun_size = size(term.fun);
      var arg_size = size(term.arg);
      return 1 + fun_size + arg_size;
    }
    case "Var": {
      return 1;
    }
  }
}
```

Where:
- The function name is defined (e.g., 'size')
- Parameters are specified with their types (e.g., 'term: HTerm')
- The return type is specified (e.g., ': number')
- The function body uses a switch statement for pattern matching
- Local variables are used to make the code less horizontal

## Top-Level Datatype

Alternatively, a .ts file can also define a datatype (ADT). Example:

```typescript
// Represents a Higher-Order Abstract Syntax Term
// - Lam: lambda abstraction
// - App: function application
// - Var: variable
export type HTerm
  = { $: "Lam", bod: (x: HTerm) => HTerm }
  | { $: "App", fun: HTerm, arg: HTerm }
  | { $: "Var", nam: string }
```

ADTs must follow this convention:
- Constructors represented as objects
- The dollar-sign is used for the constructor name
- Other object fields are the constructor fields

## Idiomatic TypeScript Examples

Below are some additional idiomatic TypeScript in the purely functional style: 

### List/zip.ts

```typescript
import { List } from "./_";

// Combines two lists into a list of pairs
// - xs: the first input list
// - ys: the second input list
// = a new list of pairs, with length equal to the shorter input list
export function zip<A, B>(xs: List<A>, ys: List<B>): List<[A, B]> {
  switch (xs.$) {
    case "Cons": {
      switch (ys.$) {
        case "Cons": {
          var head = [xs.head, ys.head] as [A,B];
          var tail = zip(xs.tail, ys.tail);
          return { $: "Cons", head, tail };
        }
        case "Nil": {
          return { $: "Nil" };
        }
      }
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
```

### List/filter.ts

```typescript
import { List } from "./_";

// Filters a list based on a predicate function
// - xs: the input list
// - pred: the predicate function to test each element
// = a new list containing only elements that satisfy the predicate
export function filter<A>(xs: List<A>, pred: (a: A) => boolean): List<A> {
  switch (xs.$) {
    case "Cons": {
      var head = xs.head;
      var tail = filter(xs.tail, pred);
      return pred(xs.head) ? { $: "Cons", head, tail } : tail;
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
```

### Tree/_.ts

```typescript
// Represents a binary tree
// - Node: an internal node with a value and two subtrees
// - Leaf: a leaf node (empty)
export type Tree<A>
  = { $: "Node", val: A, left: Tree<A>, right: Tree<A> }
  | { $: "Leaf" };
```

### Tree/sum.ts

```typescript
import { Tree } from "./_";

// Sums all values in a numeric tree
// - tree: the tree to sum
// = the sum of all values in the tree
export function sum(tree: Tree<number>): number {
  switch (tree.$) {
    case "Node": {
      var left  = sum(tree.left);
      var right = sum(tree.right);
      return tree.val + left + right;
    }
    case "Leaf": {
      return 0;
    }
  }
}
```

### V3/_.ts

```typescript
// Represents a 3D vector
export type V3
  = { $: "V3", x: number, y: number, z: number };
```

### V3/dot.ts

```typescript
import { V3 } from "./_";

// Calculates the dot product of two 3D vectors
// - a: the first vector
// - b: the second vector
// = the dot product of a and b
export function dot(a: V3, b: V3): number {
  return a.x * b.x + a.y * b.y + a.z * b.z;
}
```

---

# NOTES

- Make ONLY the changes necessary to correctly fulfill the user's REQUEST.

- Do NOT fix, remove, complete or alter any parts unrelated to the REQUEST.

- Pay attention to the user's style, and mimic it as close as possible.

- Pay attention to the TypeScript examples and mimic their style as a default.

- Consult TypeScript guide to emit idiomatic correct code.

- Do NOT use or assume the existence of files that weren't shown to you.

- Be precise and careful in your modifications.

---

# TASK

You will now be given the actual INPUT you must work with.

<FILE path="/home/travis/Projects/message-queue/src/main.ts">
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  await app.listen(3030);
}
bootstrap();

</FILE>
<FILE path="/home/travis/Projects/message-queue/src/message-broker/message-broker.gateway.ts">
import {
  WebSocketGateway,
  SubscribeMessage,
  MessageBody,
  ConnectedSocket,
  WebSocketServer,
} from '@nestjs/websockets';
import { Server, Socket } from 'socket.io';
import { MessageBrokerService } from './message-broker.service';

@WebSocketGateway()
export class MessageBrokerGateway {
  @WebSocketServer()
  server: Server;

  constructor(private readonly messageBrokerService: MessageBrokerService) {
    // Subscribe to all exchanges and queues
    this.subscribeToAllExchanges();
  }

  private subscribeToAllExchanges() {
    this.messageBrokerService.onMessage((exchange, queue, message) => {
      this.server.emit('message', { exchange, queue, message });
    });
  }

  @SubscribeMessage('subscribe')
  handleSubscribe(
    @MessageBody() data: { exchange: string; queue: string },
    @ConnectedSocket() client: Socket,
  ) {
    const { exchange, queue } = data;
    const callback = (message: any) => {
      client.emit('message', { exchange, queue, message });
    };

    const success = this.messageBrokerService.subscribe(exchange, queue, callback);

    if (success) {
      client.on('disconnect', () => {
        this.messageBrokerService.unsubscribe(exchange, queue, callback);
      });
      return { status: 'ok', message: 'Subscribed successfully' };
    } else {
      return { status: 'error', message: 'Failed to subscribe' };
    }
  }
}
</FILE>
<FILE path="/home/travis/Projects/message-queue/src/message-broker/message-broker.service.ts">
import { Injectable } from '@nestjs/common';
import { MessageStorageService } from './message-storage.service';
import { Exchange } from './exchange';
import { EventEmitter } from 'events';

@Injectable()
export class MessageBrokerService {
  private exchanges: Map<string, Exchange> = new Map();
  private eventEmitter: EventEmitter = new EventEmitter();

  constructor(private messageStorage: MessageStorageService) {}

  createExchange(name: string): Exchange {
    const exchange = new Exchange(name, this.messageStorage);
    this.exchanges.set(name, exchange);
    return exchange;
  }

  getExchange(name: string): Exchange | undefined {
    return this.exchanges.get(name);
  }

  async publish(exchangeName: string, routingKey: string, message: any): Promise<boolean> {
    const exchange = this.getExchange(exchangeName);
    if (exchange) {
      await exchange.publish(routingKey, message);
      this.eventEmitter.emit('message', exchangeName, routingKey, message);
      return true;
    }
    return false;
  }

  async consume(exchangeName: string, queueName: string): Promise<any> {
    const exchange = this.getExchange(exchangeName);
    if (exchange) {
      return await exchange.consume(queueName);
    }
    return null;
  }

  bind(exchangeName: string, queueName: string, routingKey: string): boolean {
    const exchange = this.getExchange(exchangeName);
    if (exchange) {
      exchange.bind(queueName, routingKey);
      return true;
    }
    return false;
  }

  subscribe(exchangeName: string, queueName: string, callback: (message: any) => void): boolean {
    const exchange = this.getExchange(exchangeName);
    if (exchange) {
      exchange.subscribe(queueName, callback);
      return true;
    }
    return false;
  }

  unsubscribe(exchangeName: string, queueName: string, callback: (message: any) => void): boolean {
    const exchange = this.getExchange(exchangeName);
    if (exchange) {
      exchange.unsubscribe(queueName, callback);
      return true;
    }
    return false;
  }

  async getQueueLength(exchangeName: string, queueName: string): Promise<number> {
    return await this.messageStorage.getQueueLength(exchangeName, queueName);
  }

  onMessage(callback: (exchange: string, queue: string, message: any) => void) {
    this.eventEmitter.on('message', callback);
  }
}
</FILE>
<FILE path="/home/travis/Projects/message-queue/src/message-broker/message-storage.service.ts">
import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';
import Redis from 'ioredis';

@Injectable()
export class MessageStorageService implements OnModuleInit, OnModuleDestroy {
  private redisClient: Redis;

  async onModuleInit() {
    this.redisClient = new Redis({
      host: process.env.REDIS_HOST || 'localhost',
      port: parseInt(process.env.REDIS_PORT || '6379'),
    });
  }

  async onModuleDestroy() {
    await this.redisClient.quit();
  }

  private getQueueKey(exchangeName: string, queueName: string): string {
    return `${exchangeName}:${queueName}`;
  }

  async saveMessage(exchangeName: string, queueName: string, message: any): Promise<void> {
    const queueKey = this.getQueueKey(exchangeName, queueName);
    await this.redisClient.rpush(queueKey, JSON.stringify({
      timestamp: Date.now(),
      content: message
    }));
  }

  async getMessages(exchangeName: string, queueName: string, count: number = 1): Promise<any[]> {
    const queueKey = this.getQueueKey(exchangeName, queueName);
    const messages = await this.redisClient.lrange(queueKey, 0, count - 1);
    return messages.map(msg => JSON.parse(msg));
  }

  async removeMessage(exchangeName: string, queueName: string): Promise<any> {
    const queueKey = this.getQueueKey(exchangeName, queueName);
    return JSON.parse(await this.redisClient.lpop(queueKey));
  }

  async getQueueLength(exchangeName: string, queueName: string): Promise<number> {
    const queueKey = this.getQueueKey(exchangeName, queueName);
    return await this.redisClient.llen(queueKey);
  }
}

</FILE>
<FILE path="/home/travis/Projects/message-queue/src/message-broker/exchange.ts">

import { MessageStorageService } from './message-storage.service';

import { Queue } from './queue';

export class Exchange {
  private queues: Map<string, Queue> = new Map();

  constructor(
    private name: string,
    private messageStorage: MessageStorageService
  ) {}

  bind(queueName: string, routingKey: string) {
    if (!this.queues.has(queueName)) {
      this.queues.set(queueName, new Queue(this.name, queueName, this.messageStorage));
    }
  }

  async publish(routingKey: string, message: any) {
    this.queues.forEach((queue, queueName) => {
      if (queueName === routingKey) {
        queue.enqueue(message);
      }
    });
  }

  async consume(queueName: string): Promise<any> {
    const queue = this.queues.get(queueName);
    if (queue) {
      return await queue.dequeue();
    }
    return null;
  }

  subscribe(queueName: string, callback: (message: any) => void) {
    const queue = this.queues.get(queueName);
    if (queue) {
      queue.subscribe(callback);
    }
  }

  unsubscribe(queueName: string, callback: (message: any) => void) {
    const queue = this.queues.get(queueName);
    if (queue) {
      queue.unsubscribe(callback);
    }
  }
}
</FILE>
<FILE path="/home/travis/Projects/message-queue/src/message-broker/queue.ts">
import { EventEmitter } from 'events';
import { MessageStorageService } from './message-storage.service';

export class Queue {
  private eventEmitter = new EventEmitter();

  constructor(
    private exchangeName: string,
    private queueName: string,
    private messageStorage: MessageStorageService
  ) {}

  async enqueue(message: any) {
    await this.messageStorage.saveMessage(this.exchangeName, this.queueName, message);
    this.eventEmitter.emit('message', message);
  }

  async dequeue(): Promise<any> {
    const message = await this.messageStorage.removeMessage(this.exchangeName, this.queueName);
    if (message) {
      return message.content;
    }
    
    return new Promise((resolve) => {
      this.eventEmitter.once('message', async (newMessage) => {
        await this.messageStorage.removeMessage(this.exchangeName, this.queueName);
        resolve(newMessage);
      });
    });
  }

  subscribe(callback: (message: any) => void) {
    this.eventEmitter.on('message', callback);
  }

  unsubscribe(callback: (message: any) => void) {
    this.eventEmitter.off('message', callback);
  }
}

</FILE>
<FILE path="/home/travis/Projects/message-queue/test/test-producer.ts">
import axios from 'axios';

async function testProducer() {
  const baseUrl = 'http://localhost:3030/message-broker';

  try {
    // Create an exchange
    await axios.post(`${baseUrl}/exchange`, { name: 'test-exchange' });
    console.log('Exchange created');

    // Bind a queue to the exchange
    await axios.post(`${baseUrl}/bind`, {
      exchange: 'test-exchange',
      queue: 'test-queue',
      routingKey: 'test-queue'
    });
    console.log('Queue bound to exchange');

    // Publish messages
    for (let i = 0; i < 5; i++) {
      await axios.post(`${baseUrl}/publish`, {
        exchange: 'test-exchange',
        routingKey: 'test-queue',
        message: `Test message ${i + 1}`
      });
      console.log(`Published message ${i + 1}`);
    }

    // Get queue length
    const response = await axios.get(`${baseUrl}/queue-length/test-exchange/test-queue`);
    console.log(`Queue length: ${response.data.length}`);

  } catch (error) {
    console.error('Error:', error.response ? error.response.data : error.message);
  }
}

testProducer();
</FILE>
<FILE path="/home/travis/Projects/message-queue/test/test-consumer.ts">
import axios from 'axios';

async function testConsumer() {
  const baseUrl = 'http://localhost:3030/message-broker';

  try {
    while (true) {
      const response = await axios.get(`${baseUrl}/consume/test-exchange/test-queue`);
      if (response.data.status === 'ok') {
        console.log('Received message:', response.data.message);
      } else {
        console.log('No message available');
        await new Promise(resolve => setTimeout(resolve, 1000)); // Wait for 1 second before trying again
      }
    }
  } catch (error) {
    console.error('Error:', error.response ? error.response.data : error.message);
  }
}

testConsumer();
</FILE>
<FILE path="/home/travis/Projects/message-queue/test:websocket-client.stdout.txt">
Connected to WebSocket server
Subscription response: { status: 'error', message: 'Failed to subscribe' }
Received message via WebSocket: {
  exchange: 'test-exchange',
  queue: 'test-queue',
  message: 'Test message 1'
}
Received message via WebSocket: {
  exchange: 'test-exchange',
  queue: 'test-queue',
  message: 'Test message 2'
}
Received message via WebSocket: {
  exchange: 'test-exchange',
  queue: 'test-queue',
  message: 'Test message 3'
}
Received message via WebSocket: {
  exchange: 'test-exchange',
  queue: 'test-queue',
  message: 'Test message 4'
}
Received message via WebSocket: {
  exchange: 'test-exchange',
  queue: 'test-queue',
  message: 'Test message 5'
}

</FILE>
<FILE path="/home/travis/Projects/message-queue/test:producer.stdout.txt">
Exchange created
Queue bound to exchange
Published message 1
Published message 2
Published message 3
Published message 4
Published message 5
Queue length: 15

</FILE>
<FILE path="/home/travis/Projects/message-queue/test:consumer.stdout.txt">
No message available
No message available
No message available
No message available
No message available
No message available
No message available
No message available
No message available
No message available
No message available
No message available
No message available
Received message: Test message 1
Received message: Test message 2
Received message: Test message 3
Received message: Test message 4
Received message: Test message 5
Received message: Test message 1
Received message: Test message 2
Received message: Test message 3
Received message: Test message 4
Received message: Test message 5

</FILE>
<FILE path="/home/travis/Projects/message-queue/start:dev.stdout.txt">
c[[90m2:46:42 PM[0m] Starting compilation in watch mode...

[[90m2:46:43 PM[0m] Found 0 errors. Watching for file changes.

[32m[Nest] 773322  - [39m09/05/2024, 2:46:44 PM [32m    LOG[39m [38;5;3m[NestFactory] [39m[32mStarting Nest application...[39m
[32m[Nest] 773322  - [39m09/05/2024, 2:46:44 PM [32m    LOG[39m [38;5;3m[InstanceLoader] [39m[32mAppModule dependencies initialized[39m[38;5;3m +7ms[39m
[32m[Nest] 773322  - [39m09/05/2024, 2:46:44 PM [32m    LOG[39m [38;5;3m[InstanceLoader] [39m[32mMessageBrokerModule dependencies initialized[39m[38;5;3m +0ms[39m
[32m[Nest] 773322  - [39m09/05/2024, 2:46:44 PM [32m    LOG[39m [38;5;3m[WebSocketsController] [39m[32mMessageBrokerGateway subscribed to the "subscribe" message[39m[38;5;3m +7ms[39m
[32m[Nest] 773322  - [39m09/05/2024, 2:46:44 PM [32m    LOG[39m [38;5;3m[RoutesResolver] [39m[32mAppController {/}:[39m[38;5;3m +1ms[39m
[32m[Nest] 773322  - [39m09/05/2024, 2:46:44 PM [32m    LOG[39m [38;5;3m[RouterExplorer] [39m[32mMapped {/, GET} route[39m[38;5;3m +1ms[39m
[32m[Nest] 773322  - [39m09/05/2024, 2:46:44 PM [32m    LOG[39m [38;5;3m[RoutesResolver] [39m[32mMessageBrokerController {/message-broker}:[39m[38;5;3m +0ms[39m
[32m[Nest] 773322  - [39m09/05/2024, 2:46:44 PM [32m    LOG[39m [38;5;3m[RouterExplorer] [39m[32mMapped {/message-broker/exchange, POST} route[39m[38;5;3m +1ms[39m
[32m[Nest] 773322  - [39m09/05/2024, 2:46:44 PM [32m    LOG[39m [38;5;3m[RouterExplorer] [39m[32mMapped {/message-broker/bind, POST} route[39m[38;5;3m +0ms[39m
[32m[Nest] 773322  - [39m09/05/2024, 2:46:44 PM [32m    LOG[39m [38;5;3m[RouterExplorer] [39m[32mMapped {/message-broker/publish, POST} route[39m[38;5;3m +0ms[39m
[32m[Nest] 773322  - [39m09/05/2024, 2:46:44 PM [32m    LOG[39m [38;5;3m[RouterExplorer] [39m[32mMapped {/message-broker/consume/:exchange/:queue, GET} route[39m[38;5;3m +0ms[39m
[32m[Nest] 773322  - [39m09/05/2024, 2:46:44 PM [32m    LOG[39m [38;5;3m[RouterExplorer] [39m[32mMapped {/message-broker/queue-length/:exchange/:queue, GET} route[39m[38;5;3m +1ms[39m
[32m[Nest] 773322  - [39m09/05/2024, 2:46:44 PM [32m    LOG[39m [38;5;3m[NestApplication] [39m[32mNest application successfully started[39m[38;5;3m +2ms[39m

</FILE>
<FILE path="test/test-websocket-client.ts" TARGET>
import { io } from 'socket.io-client';

const socket = io('http://localhost:3030');

socket.on('connect', () => {
  console.log('Connected to WebSocket server');

  // Subscribe to a queue
  socket.emit('subscribe', { exchange: 'test-exchange', queue: 'test-queue' }, (response) => {
    console.log('Subscription response:', response);
  });

  // Listen for messages
  socket.on('message', (data) => {
    console.log('Received message via WebSocket:', data);
  });
});

socket.on('disconnect', () => {
  console.log('Disconnected from WebSocket server');
});

// Keep the script running
setInterval(() => {}, 1000);
</FILE>
<REQUEST>
write another test to make sure the messages only get routed to the right queues
</REQUEST>